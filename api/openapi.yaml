openapi: 3.0.3
info:
  title: ElizaOS Agent Integration API
  version: 1.0.0
  description: |
    API for communication between autonomous agents (Managers, Workers) and the central ElizaOS orchestration or monitoring system.
    This specification outlines RESTful endpoints. A gRPC interface (defined in proto/agent.proto) might also be used for streaming communication.

servers:
  - url: /api/v1/agent-protocol # Example base path
    description: Main agent protocol endpoint

paths:
  /register:
    post:
      summary: Register a new agent upon startup
      tags:
        - AgentLifecycle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentSpecInput'
      responses:
        '201':
          description: Agent successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        '400':
          description: Invalid registration data
        '500':
          description: Server error during registration

  /agents/{agentId}/heartbeat:
    post:
      summary: Agent sends a heartbeat signal
      tags:
        - AgentCommunication
      parameters:
        - $ref: '#/components/parameters/AgentIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeartbeatInput'
      responses:
        '200':
          description: Heartbeat received
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                    example: ack
                  next_expected_in_ms: # Optional: Server can suggest next heartbeat interval
                    type: integer 
                    example: 60000 
        '404':
          description: Agent not found

  /agents/{agentId}/tasks:
    post:
      summary: Assign a new task to an agent (Pushed by orchestrator)
      tags:
        - AgentCommunication
      parameters:
        - $ref: '#/components/parameters/AgentIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput' # Task details pushed to the agent
      responses:
        '202':
          description: Task accepted by agent for execution
        '400':
          description: Invalid task data
        '404':
          description: Agent not found
        '409':
          description: Agent busy, cannot accept task

  /tasks/{taskId}/result:
    put:
      summary: Agent reports the result of a completed task
      tags:
        - AgentCommunication
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the task being reported.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskResultInput'
      responses:
        '200':
          description: Task result successfully recorded
        '400':
          description: Invalid result data
        '404':
          description: Task not found or already completed

  /agents/{agentId}/specialize:
    post:
      summary: Request worker specialization analysis and action
      tags:
        - AgentLifecycle
        - ElizaOSIntegration
      parameters:
        - $ref: '#/components/parameters/AgentIdPath' # Typically the worker ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecializationRequestInput'
      responses:
        '200':
          description: Specialization analysis initiated or result returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecializationResponse'
        '400':
          description: Invalid request data
        '404':
          description: Agent (worker) not found

components:
  parameters:
    AgentIdPath:
      name: agentId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier of the agent.

  schemas:
    # --- Input Schemas (Data sent TO the API) ---
    AgentSpecInput:
      type: object
      required: [id, type, farm_id]
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [manager, worker, specialist]
        farm_id:
          type: string
          format: uuid
        capabilities:
          type: object
          additionalProperties: { type: string }
          example: { "skill": "data_analysis", "language": "python" }
        max_workers:
          type: integer
          description: Required for managers
        initial_state:
          type: object
          description: Optional initial config

    HeartbeatInput:
      type: object
      required: [timestamp, status]
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: string
          enum: [idle, working, initializing, degraded]
        metrics:
          type: object
          description: Optional performance metrics (load, memory etc.)

    TaskInput:
      # This mirrors the Task message from proto, simplified for REST
      type: object
      required: [task_id, description, payload]
      properties:
        task_id: { type: string, format: uuid }
        goal_id: { type: string, format: uuid }
        description: { type: string }
        payload: { type: object }
        priority: { type: integer, default: 0 }
        deadline: { type: string, format: date-time }

    TaskResultInput:
      type: object
      required: [agent_id, success]
      properties:
        agent_id: { type: string, format: uuid }
        success: { type: boolean }
        output: { type: object, description: "Output data if successful" }
        error_message: { type: string, description: "Error message if failed" }
        completed_at: { type: string, format: date-time }

    SpecializationRequestInput:
       type: object
       required: [manager_id, performance_data]
       properties:
         manager_id: { type: string, format: uuid }
         performance_data: { type: object }
         desired_outcome: { type: string }

    # --- Response Schemas (Data sent FROM the API) ---
    RegistrationResponse:
      type: object
      properties:
        agent_id: { type: string, format: uuid }
        success: { type: boolean }
        message: { type: string }
        initial_config: { type: object }

    SpecializationResponse:
      type: object
      properties:
        worker_id: { type: string, format: uuid }
        success: { type: boolean }
        new_specialization: { type: string }
        message: { type: string }

    # Common Error Response
    ErrorResponse:
        type: object
        properties:
            code: { type: string }
            message: { type: string }
            details: { type: object } 