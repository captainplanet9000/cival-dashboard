// src/types/generated/py_models.ts
// These types are manually generated or would ideally be generated by datamodel-code-generator.
// For Pydantic model changes, these will need manual updates if generation is not working.

// From base_models.py
export interface MarketDataInterface {
  symbol: string;
  price: number;
  timestamp: string; // Assuming ISO date string from Python's datetime
  volume?: number | null;
  open?: number | null;
  high?: number | null;
  low?: number | null;
  close?: number | null;
}

export type TradeAction = "BUY" | "SELL" | "HOLD";

export interface TradeSignalInterface {
  symbol: string;
  action: TradeAction;
  confidence: number;
  timestamp: string;
  execution_price?: number | null;
  rationale: string;
  metadata?: Record<string, any> | null;
}

// From agent_config_models.py
export interface CrewAgentConfigInterface {
  role: string;
  goal: string;
  backstory: string;
  llm_identifier?: string | null; // Optional, defaults to None in Pydantic
  allow_delegation: boolean;      // Has default in Pydantic, so effectively not optional for creation
  verbose: boolean;               // Has default in Pydantic, so effectively not optional for creation
  tools?: Record<string, any>[] | null; // Optional List[Dict], defaults to None
  strategy_specific_params: Record<string, any>; // Optional Dict, default_factory=dict
}

// From agent_task_models.py (assuming structure)
export type AgentTaskStatus = "PENDING" | "RUNNING" | "COMPLETED" | "FAILED" | "CANCELLED";

export interface AgentTaskInterface { // Renamed from AgentTask to avoid conflict with a potential class
  task_id: string; // UUID
  agent_id?: string | null; // UUID
  user_id: string; // UUID
  task_name?: string | null;
  status: AgentTaskStatus;
  input_parameters?: Record<string, any> | null;
  results?: Record<string, any> | null; // This can be complex, including TradeSignal and TradeExecutionResult
  error_message?: string | null;
  created_at: string; // ISO datetime string
  updated_at: string; // ISO datetime string
  started_at?: string | null; // ISO datetime string
  completed_at?: string | null; // ISO datetime string
}


// Payload definition for creating an agent (used by frontend forms)
// This aligns with python-ai-services/models/api_models.py/CreateAgentApiPayload
export interface CreateAgentClientPayload {
  agent_name: string; 
  assigned_strategy_id: string; // Must be UUID string
  configuration_parameters?: CrewAgentConfigInterface | null; // Updated as per task
  initial_capital: number;
  funding_currency: string;
  // description field was added to UpdateAgentApiPayload, let's add it here as optional too
  description?: string | null; 
}

// Payload for updating an agent
export interface UpdateAgentClientPayload {
    agent_name?: string | null;
    assigned_strategy_id?: string | null; // UUID string
    configuration_parameters?: CrewAgentConfigInterface | null;
    description?: string | null;
}

// Response model for agent details
// Mirrors python-ai-services/models/api_models.py/TradingAgentDetailsResponse
export interface TradingAgentDetailsInterface { // Renamed from TradingAgentDetailsResponse
    agent_id: string; // UUID
    user_id: string; // UUID
    agent_name: string;
    description?: string | null;
    assigned_strategy_id?: string | null; // UUID
    wallet_id?: string | null; // UUID
    status: string; 
    configuration_parameters?: CrewAgentConfigInterface | null; // Could be the validated CrewAgentConfig
    created_at: string; // ISO datetime string
    updated_at: string; // ISO datetime string
}
