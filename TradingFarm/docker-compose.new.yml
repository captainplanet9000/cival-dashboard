version: '3.8'

# Trading Farm Full-Stack Deployment
# Includes: Next.js Frontend, FastAPI Backend, Supabase (Postgres, Storage, Studio), Windmill
# One-click deploy solution for development and production

networks:
  trading_farm_net:
    driver: bridge

services:
  #===========================================
  # Frontend - Next.js Dashboard
  #===========================================
  frontend:
    build:
      context: ./next-dashboard
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    container_name: tradingfarm_frontend
    ports:
      - "3000:3000"
    networks:
      - trading_farm_net
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    restart: unless-stopped
    depends_on:
      - backend
      - supabase_postgres
      - supabase_storage
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 40s

  #===========================================
  # Backend - FastAPI
  #===========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tradingfarm_backend
    ports:
      - "8000:8000"
    networks:
      - trading_farm_net
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_SERVER=supabase_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LAYERZERO_API_KEY=${LAYERZERO_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL:-http://supabase_postgres:5432}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - ENABLE_CORS=true
      - LOG_LEVEL=info
    volumes:
      - ./backend:/app
    restart: unless-stopped
    depends_on:
      - supabase_postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  #===========================================
  # Supabase PostgreSQL
  #===========================================
  supabase_postgres:
    image: supabase/postgres:14
    container_name: tradingfarm_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - trading_farm_net
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
      - ./docker/init.sql:/docker-entrypoint-initdb.d/000_init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  #===========================================
  # Supabase Storage API
  #===========================================
  supabase_storage:
    image: supabase/storage-api:latest
    container_name: tradingfarm_storage
    restart: unless-stopped
    ports:
      - "5000:5000"
    networks:
      - trading_farm_net
    environment:
      ANON_KEY: ${SUPABASE_ANON_KEY}
      SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      POSTGREST_URL: http://supabase_rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@supabase_postgres:5432/${POSTGRES_DB:-postgres}
      REGION: us-east-1
      GLOBAL_S3_BUCKET: trading-farm-storage
    depends_on:
      - supabase_postgres
      - supabase_rest

  #===========================================
  # Supabase PostgREST
  #===========================================
  supabase_rest:
    image: postgrest/postgrest:latest
    container_name: tradingfarm_rest
    restart: unless-stopped
    ports:
      - "3001:3000"
    networks:
      - trading_farm_net
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@supabase_postgres:5432/${POSTGRES_DB:-postgres}
      PGRST_DB_SCHEMA: public,storage
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - supabase_postgres

  #===========================================
  # Supabase Studio
  #===========================================
  supabase_studio:
    image: supabase/studio:latest
    container_name: tradingfarm_studio
    restart: unless-stopped
    ports:
      - "3002:3000"
    networks:
      - trading_farm_net
    environment:
      SUPABASE_URL: http://localhost:8000
      SUPABASE_REST_URL: http://supabase_rest:3000
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
    depends_on:
      - supabase_rest
      - supabase_postgres

  #===========================================
  # Windmill - Workflow Automation
  #===========================================
  windmill:
    image: ghcr.io/windmill-labs/windmill:latest
    container_name: tradingfarm_windmill
    restart: unless-stopped
    ports:
      - "8080:8000"
    networks:
      - trading_farm_net
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@supabase_postgres:5432/${POSTGRES_DB:-postgres}?sslmode=disable
      - BASE_URL=http://localhost:8080
      - DISABLE_AUTH=${DISABLE_WINDMILL_AUTH:-false}
      - OAUTH_AUTO_SIGNUP=true
      - COOKIE_DOMAIN=localhost
      - DISABLE_RESOURCE_LISTING=false
    depends_on:
      - supabase_postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

volumes:
  postgres_data:
