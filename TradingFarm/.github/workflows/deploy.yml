name: Trading Farm Dashboard CI/CD

on:
  push:
    branches: [ main, co_op ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'next-dashboard/package-lock.json'
    
    - name: Install Frontend Dependencies
      run: cd next-dashboard && npm ci
    
    - name: Run Frontend Tests
      run: cd next-dashboard && npm test
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: 'python-libraries-mcp/requirements.txt'
    
    - name: Install Python Dependencies
      run: cd python-libraries-mcp && pip install -r requirements.txt
    
    - name: Run Python Tests
      run: cd python-libraries-mcp && pytest
  
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Next.js dashboard
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/tradingfarm-dashboard:latest
    
    - name: Build and push Python MCP server
      uses: docker/build-push-action@v4
      with:
        context: ./python-libraries-mcp
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/tradingfarm-mcp:latest
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /opt/tradingfarm
          docker-compose pull
          docker-compose up -d
          docker system prune -af
    
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
    
    - name: Run health checks
      run: |
        sleep 30
        curl -f https://tradingfarm.example.com/api/health || exit 1
        curl -f https://tradingfarm.example.com/mcp/health || exit 1
