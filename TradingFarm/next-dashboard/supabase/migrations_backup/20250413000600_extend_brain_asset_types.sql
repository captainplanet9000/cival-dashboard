-- Add support for extended brain asset types and enhance schema

-- Extend the asset_type enum with new asset types
ALTER TABLE public.brain_assets DROP CONSTRAINT IF EXISTS brain_assets_asset_type_check;
ALTER TABLE public.brain_assets ADD CONSTRAINT brain_assets_asset_type_check
  CHECK (asset_type IN (
    'pinescript', 
    'pdf', 
    'text', 
    'markdown',
    'csv',
    'json',
    'python',
    'jupyter',
    'tradingview_chart',
    'tradingview_indicator',
    'amibroker_formula',
    'tradingview_strategy',
    'metatrader_indicator',
    'metatrader_expert',
    'excel',
    'image',
    'video',
    'audio',
    'web_page',
    'research_paper',
    'model_weights',
    'model_config',
    'dataset',
    'price_data'
  ));

-- Add new columns to brain_assets for extended metadata
ALTER TABLE public.brain_assets ADD COLUMN IF NOT EXISTS asset_size BIGINT;
ALTER TABLE public.brain_assets ADD COLUMN IF NOT EXISTS asset_format TEXT;
ALTER TABLE public.brain_assets ADD COLUMN IF NOT EXISTS asset_tags TEXT[] DEFAULT '{}'::TEXT[];
ALTER TABLE public.brain_assets ADD COLUMN IF NOT EXISTS related_assets BIGINT[] DEFAULT '{}'::BIGINT[];
ALTER TABLE public.brain_assets ADD COLUMN IF NOT EXISTS structured_data JSONB;
ALTER TABLE public.brain_assets ADD COLUMN IF NOT EXISTS requires_preprocessing BOOLEAN DEFAULT FALSE;
ALTER TABLE public.brain_assets ADD COLUMN IF NOT EXISTS preprocessing_status TEXT CHECK (preprocessing_status IN ('pending', 'processing', 'completed', 'failed', NULL));
ALTER TABLE public.brain_assets ADD COLUMN IF NOT EXISTS version TEXT;
ALTER TABLE public.brain_assets ADD COLUMN IF NOT EXISTS parent_asset_id BIGINT REFERENCES public.brain_assets(id);

-- Create brain asset view types table
CREATE TABLE IF NOT EXISTS public.brain_asset_view_types (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  compatible_asset_types TEXT[] NOT NULL,
  renderer TEXT NOT NULL,
  renderer_config JSONB DEFAULT '{}'::JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create brain asset categories table
CREATE TABLE IF NOT EXISTS public.brain_asset_categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  parent_id BIGINT REFERENCES public.brain_asset_categories(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create brain asset to category mapping table
CREATE TABLE IF NOT EXISTS public.brain_asset_category_mapping (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  brain_asset_id BIGINT NOT NULL REFERENCES public.brain_assets(id) ON DELETE CASCADE,
  category_id BIGINT NOT NULL REFERENCES public.brain_asset_categories(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  UNIQUE(brain_asset_id, category_id)
);

-- Create preprocessing pipeline table
CREATE TABLE IF NOT EXISTS public.brain_asset_preprocessing_pipelines (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  asset_types TEXT[] NOT NULL,
  processor_function TEXT NOT NULL,
  processor_config JSONB DEFAULT '{}'::JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create preprocessing jobs table
CREATE TABLE IF NOT EXISTS public.brain_asset_preprocessing_jobs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  brain_asset_id BIGINT NOT NULL REFERENCES public.brain_assets(id) ON DELETE CASCADE,
  pipeline_id BIGINT NOT NULL REFERENCES public.brain_asset_preprocessing_pipelines(id) ON DELETE CASCADE,
  status TEXT NOT NULL CHECK (status IN ('pending', 'processing', 'completed', 'failed')),
  error_message TEXT,
  result_metadata JSONB,
  started_at TIMESTAMP WITH TIME ZONE,
  completed_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create asset relationships table to track dependencies between assets
CREATE TABLE IF NOT EXISTS public.brain_asset_relationships (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  source_asset_id BIGINT NOT NULL REFERENCES public.brain_assets(id) ON DELETE CASCADE,
  target_asset_id BIGINT NOT NULL REFERENCES public.brain_assets(id) ON DELETE CASCADE,
  relationship_type TEXT NOT NULL CHECK (relationship_type IN ('depends_on', 'derived_from', 'references', 'extends', 'includes', 'related_to')),
  metadata JSONB DEFAULT '{}'::JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  UNIQUE(source_asset_id, target_asset_id, relationship_type)
);

-- Add RLS policies for new tables
ALTER TABLE public.brain_asset_view_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.brain_asset_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.brain_asset_category_mapping ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.brain_asset_preprocessing_pipelines ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.brain_asset_preprocessing_jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.brain_asset_relationships ENABLE ROW LEVEL SECURITY;

-- View types policies
CREATE POLICY "Authenticated users can view brain asset view types" ON public.brain_asset_view_types
  FOR SELECT
  USING (auth.role() = 'authenticated');

-- Categories policies
CREATE POLICY "Authenticated users can view brain asset categories" ON public.brain_asset_categories
  FOR SELECT
  USING (auth.role() = 'authenticated');

-- Category mapping policies
CREATE POLICY "Users can view their own brain asset category mappings" ON public.brain_asset_category_mapping
  FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.brain_assets
    WHERE brain_assets.id = brain_asset_category_mapping.brain_asset_id
    AND brain_assets.owner_id = auth.uid()
  ));

CREATE POLICY "Users can insert their own brain asset category mappings" ON public.brain_asset_category_mapping
  FOR INSERT
  WITH CHECK (EXISTS (
    SELECT 1 FROM public.brain_assets
    WHERE brain_assets.id = brain_asset_category_mapping.brain_asset_id
    AND brain_assets.owner_id = auth.uid()
  ));

CREATE POLICY "Users can delete their own brain asset category mappings" ON public.brain_asset_category_mapping
  FOR DELETE
  USING (EXISTS (
    SELECT 1 FROM public.brain_assets
    WHERE brain_assets.id = brain_asset_category_mapping.brain_asset_id
    AND brain_assets.owner_id = auth.uid()
  ));

-- Preprocessing pipelines policies
CREATE POLICY "Authenticated users can view brain asset preprocessing pipelines" ON public.brain_asset_preprocessing_pipelines
  FOR SELECT
  USING (auth.role() = 'authenticated');

-- Preprocessing jobs policies
CREATE POLICY "Users can view their own brain asset preprocessing jobs" ON public.brain_asset_preprocessing_jobs
  FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.brain_assets
    WHERE brain_assets.id = brain_asset_preprocessing_jobs.brain_asset_id
    AND brain_assets.owner_id = auth.uid()
  ));

-- Asset relationships policies
CREATE POLICY "Users can view brain asset relationships where they own either asset" ON public.brain_asset_relationships
  FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.brain_assets
    WHERE (brain_assets.id = brain_asset_relationships.source_asset_id OR
           brain_assets.id = brain_asset_relationships.target_asset_id)
    AND brain_assets.owner_id = auth.uid()
  ));

CREATE POLICY "Users can insert relationships where they own the source asset" ON public.brain_asset_relationships
  FOR INSERT
  WITH CHECK (EXISTS (
    SELECT 1 FROM public.brain_assets
    WHERE brain_assets.id = brain_asset_relationships.source_asset_id
    AND brain_assets.owner_id = auth.uid()
  ));

CREATE POLICY "Users can delete relationships where they own the source asset" ON public.brain_asset_relationships
  FOR DELETE
  USING (EXISTS (
    SELECT 1 FROM public.brain_assets
    WHERE brain_assets.id = brain_asset_relationships.source_asset_id
    AND brain_assets.owner_id = auth.uid()
  ));

-- Insert default view types
INSERT INTO public.brain_asset_view_types (name, description, compatible_asset_types, renderer, renderer_config)
VALUES 
  ('Text Viewer', 'Standard text viewer for plain text files', ARRAY['text', 'markdown'], 'text_viewer', '{"syntax_highlighting": true}'),
  ('PDF Viewer', 'PDF viewer for PDF documents', ARRAY['pdf'], 'pdf_viewer', '{}'),
  ('Code Viewer', 'Code viewer with syntax highlighting', ARRAY['pinescript', 'python', 'jupyter'], 'code_viewer', '{"line_numbers": true}'),
  ('Data Viewer', 'Data viewer for tabular data', ARRAY['csv', 'json', 'dataset', 'price_data'], 'data_viewer', '{"pagination": true, "max_rows": 1000}'),
  ('Chart Viewer', 'Chart viewer for TradingView charts and indicators', ARRAY['tradingview_chart', 'tradingview_indicator', 'tradingview_strategy'], 'chart_viewer', '{}'),
  ('Media Viewer', 'Media viewer for images, videos, and audio', ARRAY['image', 'video', 'audio'], 'media_viewer', '{}'),
  ('Strategy Viewer', 'Strategy viewer for trading strategies', ARRAY['tradingview_strategy', 'amibroker_formula', 'metatrader_expert'], 'strategy_viewer', '{"show_backtest": true}')
ON CONFLICT (name) DO NOTHING;

-- Insert default categories
INSERT INTO public.brain_asset_categories (name, description)
VALUES 
  ('Technical Indicators', 'Technical analysis indicators for market data'),
  ('Trading Strategies', 'Complete trading strategies for automated trading'),
  ('Research Papers', 'Academic and research papers on trading and finance'),
  ('Market Data', 'Historical and real-time market data files'),
  ('Educational Content', 'Learning resources for trading and finance'),
  ('Machine Learning Models', 'AI/ML models for prediction and analysis'),
  ('Scripts & Tools', 'Utility scripts and tools for trading'),
  ('Reference Materials', 'Reference documents and guides')
ON CONFLICT (name) DO NOTHING;

-- Insert subcategories
INSERT INTO public.brain_asset_categories (name, description, parent_id)
VALUES 
  ('Trend Indicators', 'Indicators that identify market trends', (SELECT id FROM public.brain_asset_categories WHERE name = 'Technical Indicators')),
  ('Momentum Indicators', 'Indicators that measure market momentum', (SELECT id FROM public.brain_asset_categories WHERE name = 'Technical Indicators')),
  ('Volatility Indicators', 'Indicators that measure market volatility', (SELECT id FROM public.brain_asset_categories WHERE name = 'Technical Indicators')),
  ('Volume Indicators', 'Indicators based on trading volume', (SELECT id FROM public.brain_asset_categories WHERE name = 'Technical Indicators')),
  ('Mean Reversion Strategies', 'Strategies based on reversion to mean', (SELECT id FROM public.brain_asset_categories WHERE name = 'Trading Strategies')),
  ('Trend Following Strategies', 'Strategies that follow market trends', (SELECT id FROM public.brain_asset_categories WHERE name = 'Trading Strategies')),
  ('Arbitrage Strategies', 'Strategies that exploit price differences', (SELECT id FROM public.brain_asset_categories WHERE name = 'Trading Strategies')),
  ('Statistical Arbitrage', 'Strategies using statistical methods for arbitrage', (SELECT id FROM public.brain_asset_categories WHERE name = 'Trading Strategies')),
  ('Options Strategies', 'Strategies involving options trading', (SELECT id FROM public.brain_asset_categories WHERE name = 'Trading Strategies')),
  ('Classification Models', 'ML models for classification problems', (SELECT id FROM public.brain_asset_categories WHERE name = 'Machine Learning Models')),
  ('Regression Models', 'ML models for regression problems', (SELECT id FROM public.brain_asset_categories WHERE name = 'Machine Learning Models')),
  ('Time Series Models', 'ML models for time series forecasting', (SELECT id FROM public.brain_asset_categories WHERE name = 'Machine Learning Models')),
  ('Reinforcement Learning Models', 'ML models using reinforcement learning', (SELECT id FROM public.brain_asset_categories WHERE name = 'Machine Learning Models'))
ON CONFLICT (name) DO NOTHING;

-- Insert default preprocessing pipelines
INSERT INTO public.brain_asset_preprocessing_pipelines (name, description, asset_types, processor_function, processor_config)
VALUES 
  ('PDF Text Extraction', 'Extracts text from PDF documents', ARRAY['pdf'], 'extract_text_from_pdf', '{"chunk_size": 1000, "overlap": 200}'),
  ('CSV Data Processing', 'Processes CSV data files', ARRAY['csv'], 'process_csv_data', '{"infer_types": true, "handle_missing": true}'),
  ('PineScript Analysis', 'Analyzes PineScript indicators and strategies', ARRAY['pinescript', 'tradingview_indicator', 'tradingview_strategy'], 'analyze_pinescript', '{"extract_parameters": true, "determine_type": true}'),
  ('Python Code Analysis', 'Analyzes Python code for functions and dependencies', ARRAY['python'], 'analyze_python_code', '{"extract_imports": true, "extract_functions": true}'),
  ('Jupyter Notebook Processing', 'Extracts code and markdown from Jupyter notebooks', ARRAY['jupyter'], 'process_jupyter_notebook', '{"extract_code": true, "extract_markdown": true}'),
  ('Image Analysis', 'Extracts features and text from images', ARRAY['image'], 'analyze_image', '{"ocr": true, "feature_extraction": true}'),
  ('Research Paper Analysis', 'Extracts key information from research papers', ARRAY['research_paper', 'pdf'], 'analyze_research_paper', '{"extract_abstract": true, "extract_citations": true}'),
  ('Time Series Data Processing', 'Processes time series market data', ARRAY['price_data', 'csv', 'dataset'], 'process_time_series', '{"normalize": true, "handle_gaps": true, "calculate_features": true}')
ON CONFLICT (name) DO NOTHING;
