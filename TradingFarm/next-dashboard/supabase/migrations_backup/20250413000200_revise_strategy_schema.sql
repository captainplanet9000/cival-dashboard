-- Revise the Trading Strategies Schema to integrate with Brain Assets

-- First, let's check if the strategies table exists
DO $$ 
BEGIN
  IF NOT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'strategies') THEN
    -- Create the strategies table if it doesn't exist
    CREATE TABLE public.strategies (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      status TEXT NOT NULL DEFAULT 'draft',
      type TEXT NOT NULL DEFAULT 'indicator', -- 'indicator', 'strategy', 'hybrid'
      owner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
      configuration JSONB,
      parameters JSONB
    );

    -- Create triggers for created_at and updated_at
    CREATE TRIGGER set_strategies_created_at
    BEFORE INSERT ON public.strategies
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_created_at();

    CREATE TRIGGER set_strategies_updated_at
    BEFORE UPDATE ON public.strategies
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

    -- Enable Row Level Security
    ALTER TABLE public.strategies ENABLE ROW LEVEL SECURITY;

    -- Create RLS policies
    CREATE POLICY "Users can view their own strategies" ON public.strategies
      FOR SELECT
      USING (auth.uid() = owner_id);

    CREATE POLICY "Users can create their own strategies" ON public.strategies
      FOR INSERT
      WITH CHECK (auth.uid() = owner_id);

    CREATE POLICY "Users can update their own strategies" ON public.strategies
      FOR UPDATE
      USING (auth.uid() = owner_id);

    CREATE POLICY "Users can delete their own strategies" ON public.strategies
      FOR DELETE
      USING (auth.uid() = owner_id);
  END IF;
END $$;

-- Now let's add the brain assets link to the strategies table

-- First, check if the brain_assets_id column already exists
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = 'strategies' 
    AND column_name = 'brain_assets'
  ) THEN
    -- Add the brain_assets column as a JSONB array to store multiple asset references
    ALTER TABLE public.strategies 
    ADD COLUMN brain_assets JSONB DEFAULT '[]'::jsonb;
    
    -- Add a comment explaining the structure
    COMMENT ON COLUMN public.strategies.brain_assets IS 
    'Array of brain asset references: [{"id": 123, "type": "pinescript", "role": "indicator"}, ...]';
  END IF;
END $$;

-- Create a junction table to formalize the many-to-many relationship
CREATE TABLE IF NOT EXISTS public.strategy_brain_assets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  strategy_id BIGINT REFERENCES public.strategies(id) ON DELETE CASCADE,
  brain_asset_id BIGINT REFERENCES public.brain_assets(id) ON DELETE CASCADE,
  role TEXT NOT NULL, -- 'indicator', 'documentation', 'parameters', etc.
  configuration JSONB, -- Strategy-specific configuration for this asset
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  UNIQUE(strategy_id, brain_asset_id, role)
);

-- Create triggers for created_at and updated_at
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger 
    WHERE tgname = 'set_strategy_brain_assets_created_at'
  ) THEN
    CREATE TRIGGER set_strategy_brain_assets_created_at
    BEFORE INSERT ON public.strategy_brain_assets
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_created_at();
    
    CREATE TRIGGER set_strategy_brain_assets_updated_at
    BEFORE UPDATE ON public.strategy_brain_assets
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();
  END IF;
END $$;

-- Enable Row Level Security
ALTER TABLE public.strategy_brain_assets ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for strategy_brain_assets
CREATE POLICY "Users can view their own strategy_brain_assets" ON public.strategy_brain_assets
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM public.strategies
      WHERE strategies.id = strategy_brain_assets.strategy_id
      AND strategies.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert their own strategy_brain_assets" ON public.strategy_brain_assets
  FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.strategies
      WHERE strategies.id = strategy_brain_assets.strategy_id
      AND strategies.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can update their own strategy_brain_assets" ON public.strategy_brain_assets
  FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM public.strategies
      WHERE strategies.id = strategy_brain_assets.strategy_id
      AND strategies.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete their own strategy_brain_assets" ON public.strategy_brain_assets
  FOR DELETE
  USING (
    EXISTS (
      SELECT 1 FROM public.strategies
      WHERE strategies.id = strategy_brain_assets.strategy_id
      AND strategies.owner_id = auth.uid()
    )
  );

-- Create a function to search strategies by brain asset
CREATE OR REPLACE FUNCTION public.find_strategies_by_brain_asset(asset_id BIGINT)
RETURNS SETOF public.strategies
LANGUAGE sql
SECURITY INVOKER
SET search_path = ''
AS $$
  SELECT s.* FROM public.strategies s
  JOIN public.strategy_brain_assets sba ON s.id = sba.strategy_id
  WHERE sba.brain_asset_id = asset_id
  AND s.owner_id = auth.uid()
$$;
