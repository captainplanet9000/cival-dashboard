-- Create tables for strategy backtesting with brain integration

-- Create the backtest_results table to store backtest results
CREATE TABLE IF NOT EXISTS public.backtest_results (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  strategy_id BIGINT REFERENCES public.strategies(id) ON DELETE CASCADE,
  symbol TEXT NOT NULL,
  timeframe TEXT NOT NULL,
  start_date TIMESTAMP WITH TIME ZONE NOT NULL,
  end_date TIMESTAMP WITH TIME ZONE NOT NULL,
  initial_capital NUMERIC NOT NULL,
  final_capital NUMERIC NOT NULL,
  total_return NUMERIC NOT NULL,
  total_return_percentage NUMERIC NOT NULL,
  win_rate NUMERIC NOT NULL,
  total_trades INTEGER NOT NULL,
  winning_trades INTEGER NOT NULL,
  losing_trades INTEGER NOT NULL,
  largest_win NUMERIC NOT NULL,
  largest_loss NUMERIC NOT NULL,
  average_win NUMERIC NOT NULL,
  average_loss NUMERIC NOT NULL,
  max_drawdown NUMERIC NOT NULL,
  max_drawdown_percentage NUMERIC NOT NULL,
  sharpe_ratio NUMERIC NOT NULL,
  trades JSONB NOT NULL DEFAULT '[]',
  equity_curve JSONB NOT NULL DEFAULT '[]',
  strategy_params JSONB NOT NULL DEFAULT '{}',
  brain_assets JSONB, -- Links to brain assets used in the backtest
  owner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create the historical_data table to cache market data for backtesting
CREATE TABLE IF NOT EXISTS public.historical_data (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  symbol TEXT NOT NULL,
  timeframe TEXT NOT NULL,
  timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
  open NUMERIC NOT NULL,
  high NUMERIC NOT NULL,
  low NUMERIC NOT NULL,
  close NUMERIC NOT NULL,
  volume NUMERIC NOT NULL,
  source TEXT NOT NULL, -- Data source (e.g., 'binance', 'coinbase')
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  UNIQUE(symbol, timeframe, timestamp, source)
);

-- Create market_data_sources table to track available data sources
CREATE TABLE IF NOT EXISTS public.market_data_sources (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  api_url TEXT,
  status TEXT NOT NULL DEFAULT 'active',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  UNIQUE(name)
);

-- Create index on historical_data for faster queries
CREATE INDEX IF NOT EXISTS historical_data_symbol_timeframe_idx ON public.historical_data(symbol, timeframe);
CREATE INDEX IF NOT EXISTS historical_data_timestamp_idx ON public.historical_data(timestamp);

-- Create triggers for created_at and updated_at
CREATE TRIGGER set_backtest_results_created_at
BEFORE INSERT ON public.backtest_results
FOR EACH ROW
EXECUTE FUNCTION public.handle_created_at();

CREATE TRIGGER set_backtest_results_updated_at
BEFORE UPDATE ON public.backtest_results
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER set_market_data_sources_created_at
BEFORE INSERT ON public.market_data_sources
FOR EACH ROW
EXECUTE FUNCTION public.handle_created_at();

CREATE TRIGGER set_market_data_sources_updated_at
BEFORE UPDATE ON public.market_data_sources
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

-- Enable Row Level Security
ALTER TABLE public.backtest_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.historical_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.market_data_sources ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for backtest_results
CREATE POLICY "Users can view their own backtest results" ON public.backtest_results
  FOR SELECT
  USING (auth.uid() = owner_id);

CREATE POLICY "Users can insert their own backtest results" ON public.backtest_results
  FOR INSERT
  WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Users can update their own backtest results" ON public.backtest_results
  FOR UPDATE
  USING (auth.uid() = owner_id);

CREATE POLICY "Users can delete their own backtest results" ON public.backtest_results
  FOR DELETE
  USING (auth.uid() = owner_id);

-- Create RLS policies for historical_data (read-only for authenticated users)
CREATE POLICY "Authenticated users can view historical data" ON public.historical_data
  FOR SELECT
  USING (auth.role() = 'authenticated');

-- Create RLS policies for market_data_sources
CREATE POLICY "Authenticated users can view market data sources" ON public.market_data_sources
  FOR SELECT
  USING (auth.role() = 'authenticated');

-- Insert default market data sources
INSERT INTO public.market_data_sources (name, description, api_url, status)
VALUES 
  ('Binance', 'Binance cryptocurrency exchange', 'https://api.binance.com', 'active'),
  ('Coinbase', 'Coinbase Pro cryptocurrency exchange', 'https://api.exchange.coinbase.com', 'active'),
  ('CoinAPI', 'Aggregated market data provider', 'https://rest.coinapi.io', 'active'),
  ('Hyperliquid', 'Hyperliquid derivatives exchange', 'https://api.hyperliquid.xyz', 'active'),
  ('Mock', 'Mock data for testing', null, 'active')
ON CONFLICT (name) DO NOTHING;

-- Create function to get historical data for backtesting
CREATE OR REPLACE FUNCTION public.get_historical_data(
  p_symbol TEXT,
  p_timeframe TEXT,
  p_start_date TIMESTAMP WITH TIME ZONE,
  p_end_date TIMESTAMP WITH TIME ZONE,
  p_source TEXT DEFAULT NULL
)
RETURNS TABLE (
  timestamp TIMESTAMP WITH TIME ZONE,
  open NUMERIC,
  high NUMERIC,
  low NUMERIC,
  close NUMERIC,
  volume NUMERIC,
  source TEXT
)
LANGUAGE sql
SECURITY INVOKER
SET search_path = ''
AS $$
  SELECT 
    timestamp, 
    open, 
    high, 
    low, 
    close, 
    volume, 
    source
  FROM 
    public.historical_data
  WHERE 
    symbol = p_symbol
    AND timeframe = p_timeframe
    AND timestamp BETWEEN p_start_date AND p_end_date
    AND (p_source IS NULL OR source = p_source)
  ORDER BY 
    timestamp ASC;
$$;
