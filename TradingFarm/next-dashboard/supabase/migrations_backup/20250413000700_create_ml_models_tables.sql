-- Create database schema for machine learning models

-- ML Models table
CREATE TABLE IF NOT EXISTS public.ml_models (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  type TEXT NOT NULL CHECK (type IN ('classification', 'regression', 'time-series', 'reinforcement', 'custom')),
  framework TEXT NOT NULL CHECK (framework IN ('tensorflow', 'pytorch', 'scikit-learn', 'custom')),
  version TEXT NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('training', 'ready', 'error', 'archived')),
  metrics JSONB DEFAULT '{}'::JSONB,
  parameters JSONB DEFAULT '{}'::JSONB,
  metadata JSONB DEFAULT '{}'::JSONB,
  owner_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create trigger for updated_at
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.ml_models
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

-- ML Datasets table
CREATE TABLE IF NOT EXISTS public.ml_datasets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  source TEXT NOT NULL CHECK (source IN ('exchange', 'api', 'csv', 'custom')),
  format TEXT NOT NULL CHECK (format IN ('time-series', 'tabular', 'text', 'image')),
  size BIGINT,
  row_count INTEGER,
  column_count INTEGER,
  schema JSONB DEFAULT '{}'::JSONB,
  sample_data JSONB DEFAULT '[]'::JSONB,
  bucket_path TEXT,
  owner_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create trigger for updated_at
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.ml_datasets
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

-- ML Model Training Jobs table
CREATE TABLE IF NOT EXISTS public.ml_training_jobs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  model_id BIGINT NOT NULL REFERENCES public.ml_models(id) ON DELETE CASCADE,
  dataset_id BIGINT NOT NULL REFERENCES public.ml_datasets(id) ON DELETE CASCADE,
  status TEXT NOT NULL CHECK (status IN ('pending', 'running', 'completed', 'failed')),
  config JSONB NOT NULL,
  metrics JSONB DEFAULT '{}'::JSONB,
  error_message TEXT,
  logs TEXT[],
  started_at TIMESTAMP WITH TIME ZONE,
  completed_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- ML Model Predictions table
CREATE TABLE IF NOT EXISTS public.ml_predictions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  model_id BIGINT NOT NULL REFERENCES public.ml_models(id) ON DELETE CASCADE,
  symbol TEXT NOT NULL,
  timeframe TEXT NOT NULL,
  prediction_type TEXT NOT NULL CHECK (prediction_type IN ('signal', 'price', 'volatility', 'custom')),
  prediction_data JSONB NOT NULL,
  confidence REAL,
  metadata JSONB DEFAULT '{}'::JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Trading Signals from ML models
CREATE TABLE IF NOT EXISTS public.ml_trading_signals (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  model_id BIGINT NOT NULL REFERENCES public.ml_models(id) ON DELETE CASCADE,
  symbol TEXT NOT NULL,
  timeframe TEXT NOT NULL,
  signal TEXT NOT NULL CHECK (signal IN ('buy', 'sell', 'hold')),
  probability REAL NOT NULL,
  price REAL,
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  metadata JSONB DEFAULT '{}'::JSONB,
  executed BOOLEAN DEFAULT FALSE,
  execution_details JSONB DEFAULT '{}'::JSONB
);

-- Model Evaluation Results
CREATE TABLE IF NOT EXISTS public.ml_model_evaluations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  model_id BIGINT NOT NULL REFERENCES public.ml_models(id) ON DELETE CASCADE,
  dataset_id BIGINT NOT NULL REFERENCES public.ml_datasets(id) ON DELETE CASCADE,
  metrics JSONB NOT NULL,
  confusion_matrix JSONB,
  roc_data JSONB,
  feature_importance JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Agent Skills table
CREATE TABLE IF NOT EXISTS public.agent_skills (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  category TEXT NOT NULL CHECK (category IN ('analysis', 'execution', 'monitoring', 'research', 'communication')),
  permissions JSONB NOT NULL,
  requires TEXT[],
  parameters JSONB,
  version TEXT NOT NULL,
  enabled BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Agent Skill Assignments table
CREATE TABLE IF NOT EXISTS public.agent_skill_assignments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  agent_id BIGINT NOT NULL,
  skill_id TEXT NOT NULL REFERENCES public.agent_skills(id) ON DELETE CASCADE,
  parameters JSONB DEFAULT '{}'::JSONB,
  enabled BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  UNIQUE (agent_id, skill_id)
);

-- Apply Row Level Security (RLS)
ALTER TABLE public.ml_models ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ml_datasets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ml_training_jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ml_predictions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ml_trading_signals ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ml_model_evaluations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_skills ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_skill_assignments ENABLE ROW LEVEL SECURITY;

-- RLS Policies for ml_models
CREATE POLICY "Users can view their own ML models"
  ON public.ml_models FOR SELECT
  USING (auth.uid() = owner_id);

CREATE POLICY "Users can insert their own ML models"
  ON public.ml_models FOR INSERT
  WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Users can update their own ML models"
  ON public.ml_models FOR UPDATE
  USING (auth.uid() = owner_id);

CREATE POLICY "Users can delete their own ML models"
  ON public.ml_models FOR DELETE
  USING (auth.uid() = owner_id);

-- RLS Policies for ml_datasets
CREATE POLICY "Users can view their own ML datasets"
  ON public.ml_datasets FOR SELECT
  USING (auth.uid() = owner_id);

CREATE POLICY "Users can insert their own ML datasets"
  ON public.ml_datasets FOR INSERT
  WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Users can update their own ML datasets"
  ON public.ml_datasets FOR UPDATE
  USING (auth.uid() = owner_id);

CREATE POLICY "Users can delete their own ML datasets"
  ON public.ml_datasets FOR DELETE
  USING (auth.uid() = owner_id);

-- RLS Policies for ml_training_jobs
CREATE POLICY "Users can view their own ML training jobs"
  ON public.ml_training_jobs FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.ml_models
    WHERE ml_models.id = ml_training_jobs.model_id
    AND ml_models.owner_id = auth.uid()
  ));

-- RLS Policies for ml_predictions
CREATE POLICY "Users can view their own ML predictions"
  ON public.ml_predictions FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.ml_models
    WHERE ml_models.id = ml_predictions.model_id
    AND ml_models.owner_id = auth.uid()
  ));

-- RLS Policies for ml_trading_signals
CREATE POLICY "Users can view their own ML trading signals"
  ON public.ml_trading_signals FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.ml_models
    WHERE ml_models.id = ml_trading_signals.model_id
    AND ml_models.owner_id = auth.uid()
  ));

-- RLS Policies for ml_model_evaluations
CREATE POLICY "Users can view their own ML model evaluations"
  ON public.ml_model_evaluations FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.ml_models
    WHERE ml_models.id = ml_model_evaluations.model_id
    AND ml_models.owner_id = auth.uid()
  ));

-- RLS Policies for agent_skills
CREATE POLICY "Authenticated users can view agent skills"
  ON public.agent_skills FOR SELECT
  USING (auth.role() = 'authenticated');

-- RLS Policies for agent_skill_assignments
CREATE POLICY "Users can view their own agent skill assignments"
  ON public.agent_skill_assignments FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM auth.users
    WHERE users.id = auth.uid()
  ));

CREATE POLICY "Users can insert their own agent skill assignments"
  ON public.agent_skill_assignments FOR INSERT
  WITH CHECK (EXISTS (
    SELECT 1 FROM auth.users
    WHERE users.id = auth.uid()
  ));

CREATE POLICY "Users can update their own agent skill assignments"
  ON public.agent_skill_assignments FOR UPDATE
  USING (EXISTS (
    SELECT 1 FROM auth.users
    WHERE users.id = auth.uid()
  ));

CREATE POLICY "Users can delete their own agent skill assignments"
  ON public.agent_skill_assignments FOR DELETE
  USING (EXISTS (
    SELECT 1 FROM auth.users
    WHERE users.id = auth.uid()
  ));

-- Insert default agent skills
INSERT INTO public.agent_skills (id, name, description, category, permissions, requires, parameters, version, enabled)
VALUES
  ('market_analysis', 'Market Analysis', 'Performs technical analysis on market data', 'analysis', 
   '[{"resource": "market_data", "action": "read"}, {"resource": "knowledge_base", "action": "read"}]', 
   '{}', 
   '[{"name": "symbol", "type": "string", "required": true, "description": "Trading symbol"}, 
     {"name": "timeframe", "type": "string", "required": true, "description": "Timeframe for analysis"}, 
     {"name": "indicators", "type": "array", "required": false, "default": ["rsi", "macd", "bollinger_bands"], "description": "Technical indicators to use"}]', 
   '1.0.0', true),
   
  ('risk_assessment', 'Risk Assessment', 'Evaluates risk for a potential trade', 'analysis', 
   '[{"resource": "market_data", "action": "read"}, {"resource": "user_data", "action": "read"}]', 
   '{}', 
   '[{"name": "symbol", "type": "string", "required": true, "description": "Trading symbol"}, 
     {"name": "direction", "type": "string", "required": true, "description": "Trade direction (long/short)"}, 
     {"name": "entryPrice", "type": "number", "required": true, "description": "Entry price"}, 
     {"name": "stopLoss", "type": "number", "required": true, "description": "Stop loss price"}, 
     {"name": "positionSize", "type": "number", "required": true, "description": "Position size"}]', 
   '1.0.0', true),
   
  ('portfolio_analysis', 'Portfolio Analysis', 'Analyzes overall portfolio performance and allocation', 'analysis', 
   '[{"resource": "user_data", "action": "read"}]', 
   '{}', 
   '[{"name": "timeRange", "type": "string", "required": false, "default": "week", "description": "Time range for analysis"}]', 
   '1.0.0', true),
   
  ('sentiment_analysis', 'Sentiment Analysis', 'Analyzes market sentiment from news and social media', 'analysis', 
   '[{"resource": "market_data", "action": "read"}, {"resource": "knowledge_base", "action": "read"}]', 
   '{}', 
   '[{"name": "symbol", "type": "string", "required": true, "description": "Trading symbol"}, 
     {"name": "sources", "type": "array", "required": false, "default": ["twitter", "reddit", "news"], "description": "Sources to analyze"}]', 
   '1.0.0', true),
   
  ('price_prediction', 'Price Prediction', 'Uses ML models to predict future price movements', 'analysis', 
   '[{"resource": "market_data", "action": "read"}, {"resource": "ml_models", "action": "read"}]', 
   '{}', 
   '[{"name": "symbol", "type": "string", "required": true, "description": "Trading symbol"}, 
     {"name": "timeframe", "type": "string", "required": true, "description": "Timeframe for prediction"}, 
     {"name": "horizon", "type": "string", "required": true, "description": "Prediction horizon"}]', 
   '1.0.0', true),
   
  ('trade_execution', 'Trade Execution', 'Executes trades based on strategy signals', 'execution', 
   '[{"resource": "exchange", "action": "write"}, {"resource": "user_data", "action": "write"}]', 
   '{}', 
   '[{"name": "symbol", "type": "string", "required": true, "description": "Trading symbol"}, 
     {"name": "direction", "type": "string", "required": true, "description": "Trade direction (long/short)"}, 
     {"name": "entryPrice", "type": "string", "required": true, "description": "Entry price or 'market'"}, 
     {"name": "stopLoss", "type": "number", "required": true, "description": "Stop loss price"}, 
     {"name": "takeProfit", "type": "number", "required": true, "description": "Take profit price"}, 
     {"name": "size", "type": "number", "required": true, "description": "Position size"}, 
     {"name": "reason", "type": "string", "required": true, "description": "Reason for trade"}]', 
   '1.0.0', true),
   
  ('position_management', 'Position Management', 'Manages open positions', 'execution', 
   '[{"resource": "exchange", "action": "write"}, {"resource": "user_data", "action": "write"}]', 
   '{}', 
   '[{"name": "symbol", "type": "string", "required": true, "description": "Trading symbol"}, 
     {"name": "action", "type": "string", "required": true, "description": "Management action"}, 
     {"name": "parameters", "type": "object", "required": true, "description": "Action parameters"}]', 
   '1.0.0', true),
   
  ('strategy_optimization', 'Strategy Optimization', 'Optimizes strategy parameters based on historical performance', 'analysis', 
   '[{"resource": "market_data", "action": "read"}, {"resource": "ml_models", "action": "read"}, {"resource": "strategy", "action": "read"}]', 
   '{}', 
   '[{"name": "strategyId", "type": "number", "required": true, "description": "Strategy ID"}, 
     {"name": "targetMetric", "type": "string", "required": false, "default": "sharpe_ratio", "description": "Target metric to optimize"}]', 
   '1.0.0', true),
   
  ('market_scanning', 'Market Scanning', 'Scans multiple assets for potential trade setups', 'analysis', 
   '[{"resource": "market_data", "action": "read"}]', 
   '{}', 
   '[{"name": "symbols", "type": "array", "required": true, "description": "Trading symbols to scan"}, 
     {"name": "timeframe", "type": "string", "required": true, "description": "Timeframe for scanning"}, 
     {"name": "scanType", "type": "string", "required": true, "description": "Type of pattern to scan for"}]', 
   '1.0.0', true),
   
  ('news_analysis', 'News Analysis', 'Analyzes news and events for trading impact', 'analysis', 
   '[{"resource": "knowledge_base", "action": "read"}]', 
   '{}', 
   '[{"name": "symbol", "type": "string", "required": true, "description": "Trading symbol"}, 
     {"name": "lookbackDays", "type": "number", "required": false, "default": 7, "description": "Days to look back"}]', 
   '1.0.0', true),
   
  ('risk_management', 'Risk Management', 'Manages overall portfolio risk', 'execution', 
   '[{"resource": "user_data", "action": "read"}, {"resource": "exchange", "action": "read"}]', 
   '{}', 
   '[{"name": "riskLevel", "type": "string", "required": true, "description": "Risk level (low/medium/high)"}, 
     {"name": "maxDrawdown", "type": "number", "required": true, "description": "Maximum allowable drawdown"}, 
     {"name": "maxLeverage", "type": "number", "required": true, "description": "Maximum allowable leverage"}]', 
   '1.0.0', true),
   
  ('strategy_backtesting', 'Strategy Backtesting', 'Runs backtests on historical data', 'analysis', 
   '[{"resource": "market_data", "action": "read"}, {"resource": "strategy", "action": "read"}]', 
   '{}', 
   '[{"name": "strategyId", "type": "number", "required": true, "description": "Strategy ID"}, 
     {"name": "symbol", "type": "string", "required": true, "description": "Trading symbol"}, 
     {"name": "timeframe", "type": "string", "required": true, "description": "Timeframe for backtest"}, 
     {"name": "startDate", "type": "string", "required": true, "description": "Start date for backtest"}, 
     {"name": "endDate", "type": "string", "required": true, "description": "End date for backtest"}, 
     {"name": "initialCapital", "type": "number", "required": true, "description": "Initial capital"}]', 
   '1.0.0', true),
   
  ('trade_journaling', 'Trade Journaling', 'Maintains a detailed journal of trades and analysis', 'communication', 
   '[{"resource": "user_data", "action": "write"}]', 
   '{}', 
   '[{"name": "tradeId", "type": "number", "required": true, "description": "Trade ID"}, 
     {"name": "notes", "type": "string", "required": true, "description": "Trade notes"}, 
     {"name": "ratings", "type": "object", "required": true, "description": "Trade ratings"}, 
     {"name": "tags", "type": "array", "required": true, "description": "Trade tags"}]', 
   '1.0.0', true),
   
  ('correlation_analysis', 'Correlation Analysis', 'Analyzes correlations between different assets', 'analysis', 
   '[{"resource": "market_data", "action": "read"}]', 
   '{}', 
   '[{"name": "symbols", "type": "array", "required": true, "description": "Trading symbols"}, 
     {"name": "timeframe", "type": "string", "required": true, "description": "Timeframe for analysis"}, 
     {"name": "lookbackPeriod", "type": "string", "required": true, "description": "Period to look back"}]', 
   '1.0.0', true),
   
  ('alert_management', 'Alert Management', 'Sets up and manages trading alerts', 'monitoring', 
   '[{"resource": "notifications", "action": "write"}]', 
   '{}', 
   '[{"name": "action", "type": "string", "required": true, "description": "Alert action (create/update/delete/list)"}, 
     {"name": "alertParams", "type": "object", "required": false, "description": "Alert parameters"}]', 
   '1.0.0', true)
ON CONFLICT (id) DO NOTHING;
