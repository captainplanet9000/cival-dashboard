-- Enable pgvector extension for vector embeddings
CREATE EXTENSION IF NOT EXISTS vector;

-- Create brain_assets table to store metadata about brain assets
CREATE TABLE IF NOT EXISTS public.brain_assets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  filename TEXT NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  asset_type TEXT NOT NULL, -- e.g., 'pinescript', 'pdf', 'text', 'markdown'
  storage_path TEXT NOT NULL, -- Path in the storage bucket
  content_text TEXT, -- Extracted text content for searchability
  summary TEXT, -- AI-generated summary of the content
  source TEXT, -- Where this asset came from (e.g., 'user_upload', 'system_generated')
  metadata JSONB, -- Additional structured metadata specific to asset type
  owner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create brain_asset_embeddings table to store vector embeddings for semantic search
CREATE TABLE IF NOT EXISTS public.brain_asset_embeddings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  brain_asset_id BIGINT REFERENCES public.brain_assets(id) ON DELETE CASCADE,
  chunk_index INTEGER NOT NULL, -- For large documents split into chunks
  chunk_text TEXT NOT NULL, -- The text chunk this embedding represents
  embedding VECTOR(1536), -- Vector embedding (dimensionality depends on model, 1536 for OpenAI ada-002)
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create index on embeddings for faster similarity search
CREATE INDEX IF NOT EXISTS brain_asset_embeddings_embedding_idx 
ON public.brain_asset_embeddings 
USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

-- Create functions to automatically handle created_at and updated_at
CREATE OR REPLACE FUNCTION public.handle_created_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.created_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for handling created_at
CREATE TRIGGER set_brain_assets_created_at
BEFORE INSERT ON public.brain_assets
FOR EACH ROW
EXECUTE FUNCTION public.handle_created_at();

-- Create trigger for handling updated_at
CREATE TRIGGER set_brain_assets_updated_at
BEFORE UPDATE ON public.brain_assets
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

-- Enable Row Level Security
ALTER TABLE public.brain_assets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.brain_asset_embeddings ENABLE ROW LEVEL SECURITY;

-- Create policies for brain_assets
CREATE POLICY "Users can view their own brain assets" ON public.brain_assets
  FOR SELECT
  USING (auth.uid() = owner_id);

CREATE POLICY "Users can insert their own brain assets" ON public.brain_assets
  FOR INSERT
  WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Users can update their own brain assets" ON public.brain_assets
  FOR UPDATE
  USING (auth.uid() = owner_id);

CREATE POLICY "Users can delete their own brain assets" ON public.brain_assets
  FOR DELETE
  USING (auth.uid() = owner_id);

-- Create policies for brain_asset_embeddings
CREATE POLICY "Users can view related brain asset embeddings" ON public.brain_asset_embeddings
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM public.brain_assets
      WHERE brain_assets.id = brain_asset_embeddings.brain_asset_id
      AND brain_assets.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert related brain asset embeddings" ON public.brain_asset_embeddings
  FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.brain_assets
      WHERE brain_assets.id = brain_asset_embeddings.brain_asset_id
      AND brain_assets.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can update related brain asset embeddings" ON public.brain_asset_embeddings
  FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM public.brain_assets
      WHERE brain_assets.id = brain_asset_embeddings.brain_asset_id
      AND brain_assets.owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete related brain asset embeddings" ON public.brain_asset_embeddings
  FOR DELETE
  USING (
    EXISTS (
      SELECT 1 FROM public.brain_assets
      WHERE brain_assets.id = brain_asset_embeddings.brain_asset_id
      AND brain_assets.owner_id = auth.uid()
    )
  );
