-- Create tables for live strategy execution with brain integration

-- Create the strategy_executions table to track running strategies
CREATE TABLE IF NOT EXISTS public.strategy_executions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  strategy_id BIGINT REFERENCES public.strategies(id) ON DELETE CASCADE,
  agent_id BIGINT REFERENCES public.agents(id) ON DELETE SET NULL,
  symbol TEXT NOT NULL,
  timeframe TEXT NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('pending', 'running', 'paused', 'stopped', 'completed', 'failed')),
  start_time TIMESTAMP WITH TIME ZONE,
  end_time TIMESTAMP WITH TIME ZONE,
  config JSONB NOT NULL DEFAULT '{}',
  live_mode BOOLEAN NOT NULL DEFAULT false,
  paper_trading BOOLEAN NOT NULL DEFAULT true,
  initial_capital NUMERIC,
  current_capital NUMERIC,
  brain_assets JSONB,
  messages TEXT[] DEFAULT '{}'::TEXT[],
  last_error TEXT,
  metadata JSONB NOT NULL DEFAULT '{}',
  owner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create the execution_trades table to track trades from strategy execution
CREATE TABLE IF NOT EXISTS public.execution_trades (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  execution_id BIGINT REFERENCES public.strategy_executions(id) ON DELETE CASCADE,
  symbol TEXT NOT NULL,
  direction TEXT NOT NULL CHECK (direction IN ('long', 'short')),
  status TEXT NOT NULL CHECK (status IN ('pending', 'open', 'closed', 'canceled', 'failed')),
  entry_time TIMESTAMP WITH TIME ZONE,
  exit_time TIMESTAMP WITH TIME ZONE,
  entry_price NUMERIC,
  exit_price NUMERIC,
  quantity NUMERIC,
  pnl NUMERIC,
  pnl_percentage NUMERIC,
  fees NUMERIC,
  order_ids JSONB DEFAULT '[]',
  entry_reason TEXT,
  exit_reason TEXT,
  metadata JSONB NOT NULL DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create the execution_logs table for detailed logging
CREATE TABLE IF NOT EXISTS public.execution_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  execution_id BIGINT REFERENCES public.strategy_executions(id) ON DELETE CASCADE,
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  level TEXT NOT NULL CHECK (level IN ('debug', 'info', 'warning', 'error', 'critical')),
  message TEXT NOT NULL,
  source TEXT,
  metadata JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create the strategy_signals table for tracking signals
CREATE TABLE IF NOT EXISTS public.strategy_signals (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  execution_id BIGINT REFERENCES public.strategy_executions(id) ON DELETE CASCADE,
  timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
  symbol TEXT NOT NULL,
  timeframe TEXT NOT NULL,
  type TEXT NOT NULL CHECK (type IN ('entry', 'exit', 'alert', 'info')),
  direction TEXT CHECK (direction IN ('long', 'short', 'both', null)),
  price NUMERIC,
  message TEXT,
  source TEXT,
  score NUMERIC,
  metadata JSONB NOT NULL DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create the brain_agent_instructions table for ElizaOS agent management
CREATE TABLE IF NOT EXISTS public.brain_agent_instructions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  agent_id BIGINT REFERENCES public.agents(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  content TEXT NOT NULL,
  priority INTEGER NOT NULL DEFAULT 100,
  active BOOLEAN NOT NULL DEFAULT true,
  type TEXT NOT NULL CHECK (type IN ('system', 'user', 'goal', 'constraint', 'procedure')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_strategy_executions_strategy_id ON public.strategy_executions(strategy_id);
CREATE INDEX IF NOT EXISTS idx_strategy_executions_owner_id ON public.strategy_executions(owner_id);
CREATE INDEX IF NOT EXISTS idx_strategy_executions_status ON public.strategy_executions(status);
CREATE INDEX IF NOT EXISTS idx_execution_trades_execution_id ON public.execution_trades(execution_id);
CREATE INDEX IF NOT EXISTS idx_execution_trades_status ON public.execution_trades(status);
CREATE INDEX IF NOT EXISTS idx_execution_logs_execution_id ON public.execution_logs(execution_id);
CREATE INDEX IF NOT EXISTS idx_execution_logs_level ON public.execution_logs(level);
CREATE INDEX IF NOT EXISTS idx_strategy_signals_execution_id ON public.strategy_signals(execution_id);
CREATE INDEX IF NOT EXISTS idx_strategy_signals_timestamp ON public.strategy_signals(timestamp);
CREATE INDEX IF NOT EXISTS idx_brain_agent_instructions_agent_id ON public.brain_agent_instructions(agent_id);

-- Create triggers for created_at and updated_at
CREATE TRIGGER set_strategy_executions_updated_at
BEFORE UPDATE ON public.strategy_executions
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER set_execution_trades_updated_at
BEFORE UPDATE ON public.execution_trades
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER set_brain_agent_instructions_updated_at
BEFORE UPDATE ON public.brain_agent_instructions
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

-- Enable Row Level Security (RLS)
ALTER TABLE public.strategy_executions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.execution_trades ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.execution_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.strategy_signals ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.brain_agent_instructions ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for strategy_executions
CREATE POLICY "Users can view their own strategy executions" ON public.strategy_executions
  FOR SELECT
  USING (auth.uid() = owner_id);

CREATE POLICY "Users can insert their own strategy executions" ON public.strategy_executions
  FOR INSERT
  WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Users can update their own strategy executions" ON public.strategy_executions
  FOR UPDATE
  USING (auth.uid() = owner_id);

CREATE POLICY "Users can delete their own strategy executions" ON public.strategy_executions
  FOR DELETE
  USING (auth.uid() = owner_id);

-- Create RLS policies for execution_trades
CREATE POLICY "Users can view trades for their strategies" ON public.execution_trades
  FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.strategy_executions
    WHERE strategy_executions.id = execution_trades.execution_id
    AND strategy_executions.owner_id = auth.uid()
  ));

-- Create RLS policies for execution_logs
CREATE POLICY "Users can view logs for their strategies" ON public.execution_logs
  FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.strategy_executions
    WHERE strategy_executions.id = execution_logs.execution_id
    AND strategy_executions.owner_id = auth.uid()
  ));

-- Create RLS policies for strategy_signals
CREATE POLICY "Users can view signals for their strategies" ON public.strategy_signals
  FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.strategy_executions
    WHERE strategy_executions.id = strategy_signals.execution_id
    AND strategy_executions.owner_id = auth.uid()
  ));

-- Create RLS policies for brain_agent_instructions
CREATE POLICY "Users can view instructions for their agents" ON public.brain_agent_instructions
  FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.agents
    WHERE agents.id = brain_agent_instructions.agent_id
    AND agents.owner_id = auth.uid()
  ));

CREATE POLICY "Users can insert instructions for their agents" ON public.brain_agent_instructions
  FOR INSERT
  WITH CHECK (EXISTS (
    SELECT 1 FROM public.agents
    WHERE agents.id = brain_agent_instructions.agent_id
    AND agents.owner_id = auth.uid()
  ));

CREATE POLICY "Users can update instructions for their agents" ON public.brain_agent_instructions
  FOR UPDATE
  USING (EXISTS (
    SELECT 1 FROM public.agents
    WHERE agents.id = brain_agent_instructions.agent_id
    AND agents.owner_id = auth.uid()
  ));

CREATE POLICY "Users can delete instructions for their agents" ON public.brain_agent_instructions
  FOR DELETE
  USING (EXISTS (
    SELECT 1 FROM public.agents
    WHERE agents.id = brain_agent_instructions.agent_id
    AND agents.owner_id = auth.uid()
  ));
