-- Create the agents table if it doesn't exist
-- This ensures the fix_agents_policy migration can be applied successfully

-- Check if the agents table exists and create it if it doesn't
CREATE TABLE IF NOT EXISTS public.agents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  type TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'inactive',
  config JSONB DEFAULT '{}'::jsonb,
  user_id UUID REFERENCES auth.users(id), -- Include the user_id column
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Create or replace the function to handle created_at
CREATE OR REPLACE FUNCTION public.handle_created_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.created_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create or replace the function to handle updated_at
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for created_at if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'set_created_at_agents'
  ) THEN
    CREATE TRIGGER set_created_at_agents
    BEFORE INSERT ON public.agents
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_created_at();
  END IF;
END
$$;

-- Create trigger for updated_at if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'set_updated_at_agents'
  ) THEN
    CREATE TRIGGER set_updated_at_agents
    BEFORE UPDATE ON public.agents
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();
  END IF;
END
$$;

-- Enable RLS on the agents table
ALTER TABLE public.agents ENABLE ROW LEVEL SECURITY;

-- Now the fix_agents_policy migration can be successfully applied after this one
