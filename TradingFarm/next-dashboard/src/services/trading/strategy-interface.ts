import { Market, Position, OrderType, OrderSide, TimeFrame } from '@/types/trading.types';

/**
 * Represents a signal generated by a trading strategy
 */
export interface StrategySignal {
  symbol: string;
  side: OrderSide;
  strength: number; // 0-1 indicator of confidence
  price?: number;
  targetPrice?: number;
  stopLoss?: number;
  timestamp: string;
  timeframe: TimeFrame;
  metadata: Record<string, any>;
}

/**
 * Parameters required by a strategy
 */
export interface StrategyParams {
  id: string;
  name: string;
  description?: string;
  timeframe: TimeFrame;
  symbols: string[];
  risk: {
    maxPositionSize: number;
    maxDrawdown: number;
    stopLossPercent?: number;
    takeProfitPercent?: number;
  };
  parameters: Record<string, any>;
  [key: string]: any;
}

/**
 * Market data required by a strategy to generate signals
 */
export interface MarketData {
  candles: {
    symbol: string;
    timeframe: TimeFrame;
    open: number[];
    high: number[];
    low: number[];
    close: number[];
    volume: number[];
    timestamp: number[];
  };
  trades?: {
    symbol: string;
    price: number;
    size: number;
    side: 'buy' | 'sell';
    timestamp: number;
  }[];
  orderbook?: {
    symbol: string;
    bids: [number, number][]; // [price, size]
    asks: [number, number][]; // [price, size]
    timestamp: number;
  };
}

/**
 * Strategy interface that all strategies must implement
 */
export interface Strategy {
  /**
   * Get the strategy identifier
   */
  getId(): string;
  
  /**
   * Get the strategy name
   */
  getName(): string;
  
  /**
   * Get the strategy description
   */
  getDescription(): string;
  
  /**
   * Get the parameters this strategy accepts
   */
  getDefaultParams(): StrategyParams;
  
  /**
   * Configure the strategy with specific parameters
   */
  configure(params: StrategyParams): void;
  
  /**
   * Get the required market data symbols and timeframes
   */
  getRequiredMarketData(): { symbols: string[], timeframes: TimeFrame[] };
  
  /**
   * Process market data and generate trading signals
   */
  processMarketData(marketData: MarketData): StrategySignal[];
  
  /**
   * Process current positions to potentially generate exit signals
   */
  processPositions(positions: Position[]): StrategySignal[];
  
  /**
   * Reset strategy state (if any)
   */
  reset(): void;
  
  /**
   * Get the current strategy state (for persistence)
   */
  getState(): Record<string, any>;
  
  /**
   * Restore the strategy state (after restart)
   */
  setState(state: Record<string, any>): void;
}
