/**
 * Trading Strategy Signals Component
 * 
 * Displays real-time and historical signals generated by trading strategies
 */
"use client"

import { useState, useEffect } from 'react'
import { useStrategySignals } from '@/hooks/use-trading-strategy'
import { StrategySignal } from '@/services/trading-strategy-service'
import { Table, TableBody, TableCaption, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Skeleton } from '@/components/ui/skeleton'
import { ScrollArea } from '@/components/ui/scroll-area'
import { RefreshCw, ArrowBigUp, ArrowBigDown, AlertTriangle } from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'
import { cn } from '@/lib/utils'

interface StrategySignalListProps {
  strategyId: number
  limit?: number
  className?: string
  showRefresh?: boolean
}

export function StrategySignalList({ 
  strategyId, 
  limit = 50,
  className,
  showRefresh = true
}: StrategySignalListProps) {
  const { signals, isLoading, error, fetchSignals } = useStrategySignals(strategyId, limit)
  
  // Format timestamp
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleString(undefined, {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    })
  }
  
  // Format signal direction
  const formatDirection = (direction: string) => {
    switch (direction) {
      case 'buy':
        return (
          <Badge className="bg-green-100 text-green-800 hover:bg-green-100">
            <ArrowBigUp className="h-3 w-3 mr-1" />
            Buy
          </Badge>
        )
      case 'sell':
        return (
          <Badge className="bg-red-100 text-red-800 hover:bg-red-100">
            <ArrowBigDown className="h-3 w-3 mr-1" />
            Sell
          </Badge>
        )
      default:
        return (
          <Badge variant="outline">
            Neutral
          </Badge>
        )
    }
  }
  
  // Format signal type
  const formatSignalType = (type: string) => {
    switch (type) {
      case 'entry':
        return <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">Entry</Badge>
      case 'exit':
        return <Badge variant="outline" className="bg-amber-50 text-amber-700 border-amber-200">Exit</Badge>
      case 'modify':
        return <Badge variant="outline" className="bg-purple-50 text-purple-700 border-purple-200">Modify</Badge>
      default:
        return <Badge variant="outline">Unknown</Badge>
    }
  }
  
  // Format execution status
  const formatExecutionStatus = (isExecuted: boolean) => {
    return isExecuted
      ? <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">Executed</Badge>
      : <Badge variant="outline" className="bg-slate-50 text-slate-700 border-slate-200">Pending</Badge>
  }
  
  return (
    <div className={cn("space-y-4", className)}>
      {showRefresh && (
        <div className="flex justify-end">
          <Button
            variant="outline"
            size="sm"
            onClick={() => fetchSignals()}
            disabled={isLoading}
          >
            <RefreshCw className={cn("h-4 w-4 mr-2", isLoading && "animate-spin")} />
            Refresh
          </Button>
        </div>
      )}
      
      {error && (
        <div className="flex items-center justify-center p-4 rounded-md bg-red-50 text-red-800">
          <AlertTriangle className="h-5 w-5 mr-2" />
          <span>{error}</span>
        </div>
      )}
      
      {isLoading ? (
        <div className="space-y-2">
          {Array.from({ length: 5 }).map((_, i) => (
            <div key={i} className="flex items-center space-x-4 py-2">
              <Skeleton className="h-4 w-24" />
              <Skeleton className="h-4 w-16" />
              <Skeleton className="h-4 w-24" />
              <Skeleton className="h-4 w-16" />
              <Skeleton className="h-4 w-24" />
            </div>
          ))}
        </div>
      ) : signals.length === 0 ? (
        <div className="flex flex-col items-center justify-center py-8 text-center">
          <div className="rounded-full bg-slate-100 p-3 mb-3">
            <AlertTriangle className="h-6 w-6 text-slate-400" />
          </div>
          <h3 className="text-lg font-medium">No Signals Yet</h3>
          <p className="text-sm text-muted-foreground mt-1 max-w-sm">
            This strategy hasn't generated any trading signals. Signals will appear here when the strategy detects trading opportunities.
          </p>
        </div>
      ) : (
        <ScrollArea className="h-[400px]">
          <Table>
            <TableCaption>Trading signals for this strategy</TableCaption>
            <TableHeader>
              <TableRow>
                <TableHead>Time</TableHead>
                <TableHead>Direction</TableHead>
                <TableHead>Type</TableHead>
                <TableHead className="text-right">Price</TableHead>
                <TableHead className="text-right">Size</TableHead>
                <TableHead className="text-right">Status</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              <AnimatePresence>
                {signals.map((signal) => (
                  <motion.tr
                    key={signal.id}
                    initial={{ opacity: 0, y: -5 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.3 }}
                    className="border-b"
                  >
                    <TableCell className="font-medium">{formatDate(signal.timestamp)}</TableCell>
                    <TableCell>{formatDirection(signal.direction)}</TableCell>
                    <TableCell>{formatSignalType(signal.signalType)}</TableCell>
                    <TableCell className="text-right">
                      {signal.price.toLocaleString(undefined, { 
                        minimumFractionDigits: 2, 
                        maximumFractionDigits: 8 
                      })}
                    </TableCell>
                    <TableCell className="text-right">
                      {signal.quantity?.toLocaleString(undefined, { 
                        minimumFractionDigits: 2, 
                        maximumFractionDigits: 8 
                      }) || 'N/A'}
                    </TableCell>
                    <TableCell className="text-right">{formatExecutionStatus(signal.isExecuted)}</TableCell>
                  </motion.tr>
                ))}
              </AnimatePresence>
            </TableBody>
          </Table>
        </ScrollArea>
      )}
    </div>
  )
}

/**
 * Strategy Performance Component
 * 
 * Displays performance metrics for a trading strategy
 */
interface StrategyPerformanceProps {
  strategyId: number
  className?: string
}

export function StrategyPerformance({ strategyId, className }: StrategyPerformanceProps) {
  // Placeholder for strategy performance metrics
  // This would fetch performance data from the API and display metrics like:
  // - Win/loss ratio
  // - Total profit/loss
  // - Number of trades
  // - Average trade size
  // - Drawdown history
  
  return (
    <div className={cn("space-y-4", className)}>
      {/* Placeholder for future implementation */}
      <div className="text-center text-muted-foreground py-8">
        Strategy performance metrics will be displayed here in future updates.
      </div>
    </div>
  )
}

/**
 * Real-time Signal Monitor
 * 
 * Displays real-time signals as they are generated by the strategy
 */
interface RealtimeSignalMonitorProps {
  farmId?: number
  className?: string
}

export function RealtimeSignalMonitor({ farmId, className }: RealtimeSignalMonitorProps) {
  // This component would subscribe to real-time WebSocket updates for signals
  // and display them as they are generated
  
  return (
    <div className={cn("space-y-4", className)}>
      {/* Placeholder for future implementation */}
      <div className="text-center text-muted-foreground py-8">
        Real-time signal monitoring will be displayed here in future updates.
      </div>
    </div>
  )
}
