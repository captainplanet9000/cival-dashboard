"use client";

import React from "react";
import { farmService, Farm } from "@/services/farm-service";
import { createBrowserClient } from "@/utils/supabase/client";
import Link from "next/link";
import { 
  AlertCircle, 
  Building2, 
  CheckCircle, 
  Bot, 
  Layers, 
  Settings,
  PlusCircle,
  Search,
  RefreshCcw,
  BarChart
} from "lucide-react";
import { DEMO_MODE } from "@/utils/demo-data";

// Import Shadcn components
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/components/ui/use-toast";
import { Skeleton } from "@/components/ui/skeleton";
import { FarmCreationDialog } from "@/components/farms/farm-creation-dialog";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Separator } from "@/components/ui/separator";

export default function FarmsPage() {
  const [farms, setFarms] = React.useState<Farm[]>([]);
  const [filteredFarms, setFilteredFarms] = React.useState<Farm[]>([]);
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);
  const [searchQuery, setSearchQuery] = React.useState<string>("");
  const { toast } = useToast();
  const supabase = createBrowserClient();

  // Setup real-time subscription for farm updates
  React.useEffect(() => {
    const setupRealtimeSubscription = async () => {
      try {
        // Only set up real-time subscriptions when not in demo mode
        if (!DEMO_MODE && process.env.NODE_ENV !== 'development') {
          const subscription = supabase
            .channel('farms-channel')
            .on('postgres_changes', { 
              event: '*', 
              schema: 'public', 
              table: 'farms' 
            }, (payload: any) => {
              fetchFarms();
            })
            .subscribe();

          return () => {
            supabase.removeChannel(subscription);
          };
        }
      } catch (error) {
        console.error('Error setting up realtime subscription:', error);
      }
    };

    setupRealtimeSubscription();
  }, [supabase]);

  // Fetch farms data
  const fetchFarms = React.useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      // If in demo mode or development, add a slight delay to simulate network latency
      if (DEMO_MODE || process.env.NODE_ENV === 'development') {
        setTimeout(async () => {
          const response = await farmService.getFarms();
          if (response.data) {
            setFarms(response.data);
            toast({
              title: "Demo Mode Active",
              description: "Showing farm demo data - no database connection required",
            });
          }
          setLoading(false);
        }, 800);
        return;
      }
      
      const response = await farmService.getFarms();
      
      if (response.error) {
        setError(response.error);
        toast({
          title: "Error Loading Farms",
          description: response.error,
          variant: "destructive"
        });
      } else if (response.data) {
        setFarms(response.data);
        toast({
          title: "Data Loaded Successfully",
          description: `Loaded ${response.data.length} farms from database`,
        });
      }
    } catch (error: any) {
      console.error('Error fetching farms:', error);
      setError('Failed to load farms. Please try again later.');
      toast({
        title: "Connection Error",
        description: "Using demo data as fallback",
        variant: "destructive"
      });
      
      // Use demo data as fallback
      try {
        const response = await farmService.getFarms();
        if (response.data) {
          setFarms(response.data);
        }
      } catch (fallbackError) {
        console.error('Even fallback data failed:', fallbackError);
      }
    } finally {
      setLoading(false);
    }
  }, [toast]);
  
  // Load farms on component mount
  React.useEffect(() => {
    fetchFarms();
  }, [fetchFarms]);
  
  // Apply search filter when farms or query changes
  React.useEffect(() => {
    if (!farms.length) {
      setFilteredFarms([]);
      return;
    }
    
    if (!searchQuery.trim()) {
      setFilteredFarms(farms);
      return;
    }
    
    const query = searchQuery.toLowerCase().trim();
    const filtered = farms.filter(farm => 
      farm.name.toLowerCase().includes(query) || 
      (farm.description || '').toLowerCase().includes(query) || 
      (farm.status || '').toLowerCase().includes(query)
    );
    
    setFilteredFarms(filtered);
  }, [farms, searchQuery]);
  
  // Handle farm creation success
  const handleFarmCreated = (newFarm: Farm) => {
    setFarms(prevFarms => [...prevFarms, newFarm]);
    toast({
      title: "Farm Created",
      description: `${newFarm.name} has been created successfully.`
    });
  };
  
  // Handle farm deletion
  const handleDeleteFarm = async (farmId: number) => {
    try {
      // Optimistic UI update - remove from list immediately
      setFarms(prevFarms => prevFarms.filter(farm => farm.id !== farmId));
      
      // Send deletion request to API
      const response = await farmService.deleteFarm(farmId);
      
      if (response.error) {
        // Restore on error
        fetchFarms();
        toast({
          title: "Error Deleting Farm",
          description: response.error,
          variant: "destructive"
        });
      } else {
        toast({
          title: "Farm Deleted",
          description: "The farm has been deleted successfully."
        });
      }
    } catch (error) {
      // Restore and show error
      fetchFarms();
      console.error('Error deleting farm:', error);
      toast({
        title: "Error",
        description: "Failed to delete farm. Please try again later.",
        variant: "destructive"
      });
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold">Trading Farms</h1>
          <p className="text-muted-foreground">
            Manage your trading farms and their configurations
          </p>
        </div>
        <FarmCreationDialog onSuccess={handleFarmCreated} />
      </div>
      
      <div className="flex items-center gap-2">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="text"
            placeholder="Search farms by name, description, or status..."
            className="pl-8"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <Button variant="outline" onClick={fetchFarms}>
          <RefreshCcw className="h-4 w-4 mr-2" />
          Refresh
        </Button>
      </div>
      
      <Separator />
      
      {loading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array(3).fill(0).map((_, index) => (
            <Card key={index} className="overflow-hidden">
              <CardHeader className="pb-2 space-y-2">
                <Skeleton className="h-6 w-40" />
                <Skeleton className="h-4 w-20" />
              </CardHeader>
              <CardContent className="space-y-4">
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-full" />
                <div className="grid grid-cols-2 gap-4">
                  <Skeleton className="h-16 w-full" />
                  <Skeleton className="h-16 w-full" />
                </div>
                <Skeleton className="h-4 w-full" />
              </CardContent>
              <CardFooter className="pt-2">
                <div className="flex justify-between w-full">
                  <Skeleton className="h-9 w-20" />
                  <Skeleton className="h-9 w-20" />
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      ) : filteredFarms.length === 0 ? (
        <div className="flex flex-col items-center justify-center p-12 border border-dashed rounded-lg space-y-4">
          <Building2 className="h-16 w-16 text-muted-foreground opacity-20" />
          <h3 className="text-xl font-semibold">No Farms Found</h3>
          {farms.length > 0 ? (
            <p className="text-muted-foreground text-center max-w-md">
              No farms match your search criteria. Try using different keywords or clear your search.
            </p>
          ) : (
            <p className="text-muted-foreground text-center max-w-md">
              You haven't created any trading farms yet. Create your first farm to start managing your trading strategies.
            </p>
          )}
          <FarmCreationDialog variant="default" onSuccess={handleFarmCreated}>
            <PlusCircle className="h-4 w-4 mr-2" />
            Create Farm
          </FarmCreationDialog>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredFarms.filter(farm => farm && farm.id).map((farm: Farm) => (
            <Card key={farm.id} className="overflow-hidden">
              <CardHeader className="pb-2">
                <div className="flex justify-between items-start">
                  <div className="space-y-1">
                    <CardTitle className="text-lg">{farm.name}</CardTitle>
                    <CardDescription>
                      Created {new Date(farm.created_at).toLocaleDateString()}
                    </CardDescription>
                  </div>
                  <Badge variant={farm.status === 'active' ? 'default' : 'secondary'}>
                    {farm.status || 'Inactive'}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <p className="text-sm text-muted-foreground line-clamp-2">
                  {farm.description || "No description provided."}
                </p>
                
                <div className="grid grid-cols-2 gap-4">
                  <div className="flex flex-col items-center justify-center p-2 bg-muted rounded-md">
                    <Bot className="h-4 w-4 mb-1 text-muted-foreground" />
                    <span className="text-xs text-muted-foreground">Agents</span>
                    <span className="text-lg font-semibold">{farm.agents_count || 0}</span>
                  </div>
                  
                  <div className="flex flex-col items-center justify-center p-2 bg-muted rounded-md">
                    <Layers className="h-4 w-4 mb-1 text-muted-foreground" />
                    <span className="text-xs text-muted-foreground">Strategies</span>
                    <span className="text-lg font-semibold">0</span>
                  </div>
                </div>
                
                <div>
                  <div className="h-1.5 w-full overflow-hidden rounded-full bg-muted">
                    <div 
                      className="h-full rounded-full bg-blue-500" 
                      style={{ width: `${calculateFarmHealth(farm)}%` }}
                    ></div>
                  </div>
                  <div className="mt-1 flex items-center justify-between">
                    <p className="text-xs text-muted-foreground">Farm Health</p>
                    <p className="text-xs font-medium">{calculateFarmHealth(farm)}%</p>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="pt-2">
                <div className="flex justify-between w-full">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="outline" size="sm">
                        Actions
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="start">
                      <DropdownMenuItem asChild>
                        <Link href={`/dashboard/agents?farm=${farm.id}`}>
                          <Bot className="h-4 w-4 mr-2" />
                          View Agents
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild>
                        <Link href={`/dashboard/strategies?farm=${farm.id}`}>
                          <Layers className="h-4 w-4 mr-2" />
                          View Strategies
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild>
                        <Link href={`/dashboard/farms/${farm.id}/performance`}>
                          <BarChart className="h-4 w-4 mr-2" />
                          Performance
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem 
                        className="text-red-600"
                        onClick={() => handleDeleteFarm(farm.id)}
                      >
                        <AlertCircle className="h-4 w-4 mr-2" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                  
                  <Link href={`/dashboard/farms/${farm.id}`} passHref>
                    <Button size="sm">
                      <Settings className="h-4 w-4 mr-2" />
                      Manage
                    </Button>
                  </Link>
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

// Helper function to calculate farm health percentage (demo only)
function calculateFarmHealth(farm: Farm): number {
  // In a real app, this would be based on more sophisticated metrics
  return Math.floor(Math.random() * 40) + 60;
}
