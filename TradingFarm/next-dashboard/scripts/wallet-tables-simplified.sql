-- Add wallet management tables with BIGINT id types to match existing schema

-- Create handle_created_at function if it doesn't exist
CREATE OR REPLACE FUNCTION public.handle_created_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.created_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create handle_updated_at function if it doesn't exist
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create wallet table using BIGINT for IDs to match existing tables
CREATE TABLE IF NOT EXISTS public.wallets (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  farm_id BIGINT NOT NULL REFERENCES public.farms(id) ON DELETE CASCADE,
  owner_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name VARCHAR(255) NOT NULL,
  address VARCHAR(255) NOT NULL,
  network VARCHAR(50) NOT NULL,
  exchange VARCHAR(100),
  balance NUMERIC(20, 8) DEFAULT 0,
  currency VARCHAR(20) NOT NULL,
  last_updated TIMESTAMP WITH TIME ZONE DEFAULT now(),
  status VARCHAR(20) DEFAULT 'active',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Create wallet transactions table with BIGINT foreign keys
CREATE TABLE IF NOT EXISTS public.wallet_transactions (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  wallet_id BIGINT NOT NULL REFERENCES public.wallets(id) ON DELETE CASCADE,
  type VARCHAR(50) NOT NULL, -- deposit, withdrawal, transfer, trade, fee
  amount NUMERIC(20, 8) NOT NULL,
  currency VARCHAR(20) NOT NULL,
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT now(),
  status VARCHAR(20) DEFAULT 'completed',
  tx_hash VARCHAR(255),
  destination VARCHAR(255),
  source VARCHAR(255),
  fee NUMERIC(20, 8),
  fee_currency VARCHAR(20),
  note TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Create wallet alerts table with BIGINT foreign keys
CREATE TABLE IF NOT EXISTS public.wallet_alerts (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  wallet_id BIGINT NOT NULL REFERENCES public.wallets(id) ON DELETE CASCADE,
  type VARCHAR(50) NOT NULL, -- low_balance, large_deposit, suspicious_activity, other
  message TEXT NOT NULL,
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT now(),
  resolved BOOLEAN DEFAULT false,
  resolved_at TIMESTAMP WITH TIME ZONE,
  resolved_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Create wallet balance history table with BIGINT foreign keys
CREATE TABLE IF NOT EXISTS public.wallet_balance_history (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  wallet_id BIGINT NOT NULL REFERENCES public.wallets(id) ON DELETE CASCADE,
  balance NUMERIC(20, 8) NOT NULL,
  currency VARCHAR(20) NOT NULL,
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT now(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Create wallet settings table with BIGINT foreign key
CREATE TABLE IF NOT EXISTS public.wallet_settings (
  wallet_id BIGINT PRIMARY KEY REFERENCES public.wallets(id) ON DELETE CASCADE,
  low_balance_threshold NUMERIC(20, 8),
  alerts_enabled BOOLEAN DEFAULT true,
  auto_refresh BOOLEAN DEFAULT true,
  refresh_interval INTEGER DEFAULT 15, -- in minutes
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Add triggers for created_at and updated_at
CREATE TRIGGER handle_wallet_created_at
BEFORE INSERT ON public.wallets
FOR EACH ROW EXECUTE FUNCTION public.handle_created_at();

CREATE TRIGGER handle_wallet_updated_at
BEFORE UPDATE ON public.wallets
FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER handle_wallet_transaction_created_at
BEFORE INSERT ON public.wallet_transactions
FOR EACH ROW EXECUTE FUNCTION public.handle_created_at();

CREATE TRIGGER handle_wallet_transaction_updated_at
BEFORE UPDATE ON public.wallet_transactions
FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER handle_wallet_alert_created_at
BEFORE INSERT ON public.wallet_alerts
FOR EACH ROW EXECUTE FUNCTION public.handle_created_at();

CREATE TRIGGER handle_wallet_alert_updated_at
BEFORE UPDATE ON public.wallet_alerts
FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER handle_wallet_balance_history_created_at
BEFORE INSERT ON public.wallet_balance_history
FOR EACH ROW EXECUTE FUNCTION public.handle_created_at();

CREATE TRIGGER handle_wallet_settings_created_at
BEFORE INSERT ON public.wallet_settings
FOR EACH ROW EXECUTE FUNCTION public.handle_created_at();

CREATE TRIGGER handle_wallet_settings_updated_at
BEFORE UPDATE ON public.wallet_settings
FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

-- Enable Row Level Security
ALTER TABLE public.wallets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.wallet_transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.wallet_alerts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.wallet_balance_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.wallet_settings ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for wallets
CREATE POLICY "Users can view their own wallets"
ON public.wallets FOR SELECT
TO authenticated
USING (
  owner_id::TEXT = auth.uid()::TEXT
);

CREATE POLICY "Farm users can view wallets in their farms"
ON public.wallets FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.farms
    WHERE farms.user_id::TEXT = auth.uid()::TEXT 
    AND farms.id::TEXT = wallets.farm_id::TEXT
  )
);

CREATE POLICY "Users can create their own wallets"
ON public.wallets FOR INSERT
TO authenticated
WITH CHECK (
  owner_id::TEXT = auth.uid()::TEXT
);

CREATE POLICY "Farm admins can create farm wallets"
ON public.wallets FOR INSERT
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1 FROM public.farms
    WHERE farms.user_id::TEXT = auth.uid()::TEXT 
    AND farms.id::TEXT = wallets.farm_id::TEXT
  )
);

CREATE POLICY "Users can update their own wallets"
ON public.wallets FOR UPDATE
TO authenticated
USING (
  owner_id::TEXT = auth.uid()::TEXT
);

CREATE POLICY "Farm admins can update farm wallets"
ON public.wallets FOR UPDATE
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.farms
    WHERE farms.user_id::TEXT = auth.uid()::TEXT 
    AND farms.id::TEXT = wallets.farm_id::TEXT
  )
);

CREATE POLICY "Users can delete their own wallets"
ON public.wallets FOR DELETE
TO authenticated
USING (
  owner_id::TEXT = auth.uid()::TEXT
);

CREATE POLICY "Farm admins can delete farm wallets"
ON public.wallets FOR DELETE
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.farms
    WHERE farms.user_id::TEXT = auth.uid()::TEXT 
    AND farms.id::TEXT = wallets.farm_id::TEXT
  )
);

-- Similar policies for related tables
CREATE POLICY "Users can view their wallet transactions"
ON public.wallet_transactions FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.wallets
    WHERE wallets.id = wallet_transactions.wallet_id
    AND (
      wallets.owner_id::TEXT = auth.uid()::TEXT
      OR EXISTS (
        SELECT 1 FROM public.farms
        WHERE farms.user_id::TEXT = auth.uid()::TEXT 
        AND farms.id::TEXT = wallets.farm_id::TEXT
      )
    )
  )
);

CREATE POLICY "Users can view their wallet alerts"
ON public.wallet_alerts FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.wallets
    WHERE wallets.id = wallet_alerts.wallet_id
    AND (
      wallets.owner_id::TEXT = auth.uid()::TEXT
      OR EXISTS (
        SELECT 1 FROM public.farms
        WHERE farms.user_id::TEXT = auth.uid()::TEXT 
        AND farms.id::TEXT = wallets.farm_id::TEXT
      )
    )
  )
);

CREATE POLICY "Users can view their wallet balance history"
ON public.wallet_balance_history FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.wallets
    WHERE wallets.id = wallet_balance_history.wallet_id
    AND (
      wallets.owner_id::TEXT = auth.uid()::TEXT
      OR EXISTS (
        SELECT 1 FROM public.farms
        WHERE farms.user_id::TEXT = auth.uid()::TEXT 
        AND farms.id::TEXT = wallets.farm_id::TEXT
      )
    )
  )
);

CREATE POLICY "Users can view their wallet settings"
ON public.wallet_settings FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.wallets
    WHERE wallets.id = wallet_settings.wallet_id
    AND (
      wallets.owner_id::TEXT = auth.uid()::TEXT
      OR EXISTS (
        SELECT 1 FROM public.farms
        WHERE farms.user_id::TEXT = auth.uid()::TEXT 
        AND farms.id::TEXT = wallets.farm_id::TEXT
      )
    )
  )
);

-- Create API function for wallet management using BIGINT
CREATE OR REPLACE FUNCTION public.get_wallet_with_details(p_wallet_id BIGINT)
RETURNS JSON
LANGUAGE plpgsql
SECURITY INVOKER
SET search_path = ''
AS $$
BEGIN
  RETURN (
    SELECT 
      jsonb_build_object(
        'wallet', row_to_json(w),
        'transactions', (
          SELECT jsonb_agg(row_to_json(t)) 
          FROM public.wallet_transactions t 
          WHERE t.wallet_id = w.id
          ORDER BY t.timestamp DESC
          LIMIT 100
        ),
        'alerts', (
          SELECT jsonb_agg(row_to_json(a)) 
          FROM public.wallet_alerts a 
          WHERE a.wallet_id = w.id
          ORDER BY a.timestamp DESC
        ),
        'settings', (
          SELECT row_to_json(s) 
          FROM public.wallet_settings s 
          WHERE s.wallet_id = w.id
        ),
        'balance_history', (
          SELECT jsonb_agg(row_to_json(h)) 
          FROM public.wallet_balance_history h 
          WHERE h.wallet_id = w.id
          ORDER BY h.timestamp DESC
          LIMIT 365
        )
      )
    FROM public.wallets w
    WHERE w.id = p_wallet_id
  );
END;
$$;
