name: TradingFarm CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scans on Sunday at midnight
  workflow_dispatch:  # Manual trigger option

jobs:
  # TypeScript type checking - prioritizing type safety
  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Generate Supabase types
        run: npm run db:typegen
      - name: Run TypeScript compiler
        run: npm run type-check
      - name: Check type coverage
        run: npx type-coverage --detail --strict

  # Linting and code quality
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Run Prettier
        run: npm run format:check

  # Security scanning - enhanced with multiple tools
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run npm audit
        run: npm audit --audit-level=high
      - name: Run security scanner
        run: node -e "require('./src/utils/security/vulnerability-scanner').scanForVulnerabilities().then(results => { console.log(JSON.stringify(results, null, 2)); if (results.some(r => r.level === 'critical')) process.exit(1); })"
      - name: Check for secrets in code
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://staging.tradingfarm.app'
          allow_issue_writing: false
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

  # Code quality analysis
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones disabled for better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Bundle size analysis
        run: |
          npm ci
          node scripts/analyze-bundle.js --ci
          npx bundlesize

  # Unit tests - with improved coverage for hooks and components
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup test database
        run: npm run db:setup-test
      - name: Run Jest unit tests
        run: npm run test:unit -- --coverage
      - name: Run worker and performance utils tests
        run: npm run test:unit -- --testPathPattern=src/utils/performance --coverage
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Check coverage thresholds
        run: npx jest --coverage --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'

  # Component tests - specific for React components
  component-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run component tests
        run: npm run test:components
      - name: Archive component test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: component-test-results
          path: component-test-results/
          retention-days: 14
  
  # E2E tests
  e2e-tests:
    needs: [unit-tests, component-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Setup local test environment
        run: npm run db:setup-test && npm run start:test-server &
      - name: Wait for test server
        run: npx wait-on http://localhost:3000
      - name: Run authentication E2E tests
        run: npx playwright test e2e/auth.spec.ts
      - name: Run trading E2E tests
        run: npx playwright test e2e/trading.spec.ts
      - name: Run portfolio E2E tests
        run: npx playwright test e2e/portfolio.spec.ts
      - name: Run strategy management E2E tests
        run: npx playwright test e2e/strategy-management.spec.ts
      - name: Run all remaining E2E tests
        run: npx playwright test --grep-invert "(auth|trading|portfolio|strategy)"
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Performance testing
  performance-test:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run performance monitoring integration tests
        run: npm run test:unit -- --testPathPattern=src/utils/performance/performance-monitoring.integration.test.tsx
      - name: Build application
        run: npm run build
      - name: Analyze bundle size
        run: node scripts/analyze-bundle.js --threshold 1000 --report
      - name: Run local server
        run: npm start &
      - name: Wait for server
        run: npx wait-on http://localhost:3000
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/dashboard
            http://localhost:3000/trading
            http://localhost:3000/portfolio
            http://localhost:3000/strategies
          budgetPath: ./.github/lighthouse-budget.json
          uploadArtifacts: true
      - name: Run load testing
        run: npx k6 run load-tests/dashboard-load-test.js

  # Staging deployment
  deploy-staging:
    needs: [type-check, lint, security-scan, unit-tests, e2e-tests, performance-test, code-quality]
    if: github.ref == 'refs/heads/develop' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Update deployment config
        run: |
          node -e "const fs=require('fs');
            const config=require('./deployment.config.js');
            fs.writeFileSync('./deployment.env.json', JSON.stringify({...config.environments.staging, deploymentTime: new Date().toISOString()}));"
      - name: Run DB migrations
        run: npm run db:migrate:staging
      - name: Build application
        run: npm run build
        env:
          DEPLOYMENT_ENV: staging
      - name: Run security headers check
        run: npx check-headers https://staging.tradingfarm.app
      - name: Deploy to Netlify (Staging)
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: '.next'
          production-branch: develop
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy to staging from GitHub Actions'
          enable-pull-request-comment: true
          enable-commit-comment: true
          alias: staging
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      - name: Run post-deployment configuration
        run: node scripts/deploy.js --env=staging --post-deploy-config
      - name: Send deployment notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Staging deployment completed with status: ${{ job.status }} :rocket:'
          SLACK_TITLE: TradingFarm Dashboard Staging Deployment
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # Production deployment
  deploy-production:
    needs: [type-check, lint, security-scan, unit-tests, e2e-tests, performance-test, code-quality]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Update deployment config
        run: |
          node -e "const fs=require('fs');
            const config=require('./deployment.config.js');
            fs.writeFileSync('./deployment.env.json', JSON.stringify({...config.environments.production, deploymentTime: new Date().toISOString()}));"
      - name: Run DB migrations
        run: npm run db:migrate:production
      - name: Build application
        run: npm run build
        env:
          DEPLOYMENT_ENV: production
      - name: Create deployment approval issue
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: .github/DEPLOYMENT_APPROVAL_TEMPLATE.md
      - name: Deploy to Netlify (Production)
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: '.next'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy to production from GitHub Actions'
          enable-pull-request-comment: true
          enable-commit-comment: true
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      - name: Run post-deployment configuration
        run: node scripts/deploy.js --env=production --post-deploy-config
      - name: Register deployment with monitoring service
        run: node scripts/deploy.js --register-deployment
      - name: Send deployment notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Production deployment completed with status: ${{ job.status }} :rocket:'
          SLACK_TITLE: TradingFarm Dashboard Production Deployment
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      - name: Setup monitoring alerts
        run: node scripts/deploy.js --setup-alerts
      
  # Post-deployment testing
  post-deploy-tests:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run smoke tests against production
        run: npm run test:smoke-prod
      - name: Check security headers
        run: npx check-headers https://tradingfarm.app
      - name: Monitor initial performance
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://tradingfarm.app
            https://tradingfarm.app/dashboard
            https://tradingfarm.app/trading
          uploadArtifacts: true
