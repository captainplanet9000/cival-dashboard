summary: Document Ingestion Pipeline for Trading Farm
description: >
  Processes uploaded documents for farms, creating embeddings and storing chunks
  in the vector database for semantic search capabilities.
value:
  modules:
    - id: storage_event_handler
      value:
        type: script
        path: document_ingestion.py
        input:
          event_data: $trigger.payload
          supabase_url: $resources.supabase_connection.project_url
          supabase_key: $resources.supabase_connection.service_role_key
        function: handle_webhook
      retry_settings:
        max_attempts: 3
        delay_between_attempts: 2
        backoff: exponential
      loop_settings: null
      skip_module_if: null
    - id: update_status_to_processing
      value:
        type: script
        path: document_ingestion.py
        input:
          document_id: ${{ result.storage_event_handler.document_id }}
          status: "processing"
          supabase_url: $resources.supabase_connection.project_url
          supabase_key: $resources.supabase_connection.service_role_key
        function: update_doc_status_db
      retry_settings:
        max_attempts: 2
        delay_between_attempts: 2
        backoff: linear
      loop_settings: null
      skip_module_if: ${{ !result.storage_event_handler.document_id || result.storage_event_handler.error }}
    - id: download_and_parse
      value:
        type: script
        path: document_ingestion.py
        input:
          document_id: ${{ result.storage_event_handler.document_id }}
          supabase_url: $resources.supabase_connection.project_url
          supabase_key: $resources.supabase_connection.service_role_key
        function: download_and_parse
      retry_settings:
        max_attempts: 3
        delay_between_attempts: 5
        backoff: exponential
      loop_settings: null
      skip_module_if: ${{ !result.storage_event_handler.document_id || result.storage_event_handler.error }}
    - id: chunk_text
      value:
        type: script
        path: document_ingestion.py
        input:
          content: ${{ result.download_and_parse.content }}
          chunk_size: 1000
          overlap: 200
        function: chunk_text
      retry_settings:
        max_attempts: 2
        delay_between_attempts: 2
        backoff: linear
      loop_settings: null
      skip_module_if: ${{ !result.download_and_parse.content || result.download_and_parse.error }}
    - id: process_chunks
      value:
        type: forloopflow
        iterator: ${{ result.chunk_text }}
        flow:
          modules:
            - id: generate_embedding
              value:
                type: script
                path: document_ingestion.py
                input:
                  text: ${{ $index.content }}
                  openai_api_key: $resources.openai_api_key
                function: generate_embedding
              retry_settings:
                max_attempts: 3
                delay_between_attempts: 2
                backoff: exponential
              loop_settings: null
              skip_module_if: null
            - id: store_chunk_db
              value:
                type: script
                path: document_ingestion.py
                input:
                  document_id: ${{ result.storage_event_handler.document_id }}
                  chunk_data: ${{ $index }}
                  embedding: ${{ result.generate_embedding }}
                  supabase_url: $resources.supabase_connection.project_url
                  supabase_key: $resources.supabase_connection.service_role_key
                  conn_string: ${{ $resources.supabase_connection.db_connection_string }}
                function: store_chunk_db
              retry_settings:
                max_attempts: 3
                delay_between_attempts: 3
                backoff: exponential
              loop_settings: null
              skip_module_if: null
      retry_settings:
        max_attempts: 1
        delay_between_attempts: 5
        backoff: linear
      loop_settings: null
      skip_module_if: ${{ !result.chunk_text || result.chunk_text.length == 0 }}
    - id: update_status_to_completed
      value:
        type: script
        path: document_ingestion.py
        input:
          document_id: ${{ result.storage_event_handler.document_id }}
          status: "processed"
          supabase_url: $resources.supabase_connection.project_url
          supabase_key: $resources.supabase_connection.service_role_key
        function: update_doc_status_db
      retry_settings:
        max_attempts: 2
        delay_between_attempts: 2
        backoff: linear
      loop_settings: null
      skip_module_if: ${{ !result.storage_event_handler.document_id || result.storage_event_handler.error }}
  triggers:
    - webhook:
        path: /farm/document/upload
        visibility: public
  tag: document-processing
  lock_settings:
    wait_for_lock: true
  lang: typescript
  concurrency_settings:
    max_concurrency: 10
  retry_settings:
    max_attempts: 0
    delay_between_attempts: 0
    backoff: constant
  error_handler: null
  schedule: null
  enabled: true 