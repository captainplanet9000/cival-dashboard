summary: Deposit Monitoring Flow for Trading Farm
description: >
  Monitors external accounts (exchange APIs and blockchain wallets) for new deposits,
  updates vault balances, and logs transactions.
value:
  modules:
    - id: get_monitorable_accounts
      value:
        type: script
        path: deposit_monitor.py
        input:
          supabase_url: $resources.supabase_connection.project_url
          supabase_key: $resources.supabase_connection.service_role_key
        function: get_monitorable_accounts
      retry_settings:
        max_attempts: 2
        delay_between_attempts: 5
        backoff: linear
      loop_settings: null
      skip_module_if: null
    - id: check_if_accounts_exist
      value:
        type: rawscript
        content: |-
          function checkAccounts(accounts) {
            if (!accounts || accounts.length === 0) {
              return {
                success: true,
                message: "No accounts to monitor",
                accounts_checked: 0
              };
            }
            return {
              success: true,
              accounts_count: accounts.length
            };
          }
        input:
          accounts: ${{ result.get_monitorable_accounts }}
        language: typescript
      retry_settings: null
      loop_settings: null
      skip_module_if: null
    - id: process_accounts
      value:
        type: forloopflow
        iterator: ${{ result.get_monitorable_accounts }}
        flow:
          modules:
            - id: get_decrypted_creds
              value:
                type: script
                path: deposit_monitor.py
                input:
                  account: ${{ $index }}
                  vault_encryption_key: $resources.vault_encryption_key
                  supabase_url: $resources.supabase_connection.project_url
                  supabase_key: $resources.supabase_connection.service_role_key
                function: get_decrypted_creds
              retry_settings:
                max_attempts: 2
                delay_between_attempts: 3
                backoff: linear
              loop_settings: null
              skip_module_if: null
            - id: check_external_deposits
              value:
                type: script
                path: deposit_monitor.py
                input:
                  account: ${{ $index }}
                  credentials: ${{ result.get_decrypted_creds }}
                  blockchain_node_urls: $resources.blockchain_node_urls
                  last_check_time: ${{ $index.last_monitored_at || null }}
                function: check_blockchain_deposits
                cache_ttl: 0
              retry_settings:
                max_attempts: 3
                delay_between_attempts: 5
                backoff: exponential
              loop_settings: null
              skip_module_if: ${{ !result.get_decrypted_creds || $index.type !== 'defi_wallet' }}
            - id: check_exchange_deposits
              value:
                type: script
                path: deposit_monitor.py
                input:
                  account: ${{ $index }}
                  credentials: ${{ result.get_decrypted_creds }}
                  last_check_time: ${{ $index.last_monitored_at || null }}
                function: check_exchange_deposits
                cache_ttl: 0
              retry_settings:
                max_attempts: 3
                delay_between_attempts: 5
                backoff: exponential
              loop_settings: null
              skip_module_if: ${{ !result.get_decrypted_creds || $index.type !== 'exchange_api' }}
            - id: combine_deposits
              value:
                type: rawscript
                content: |-
                  function combineDeposits(blockchainDeposits, exchangeDeposits) {
                    let deposits = [];
                    if (Array.isArray(blockchainDeposits)) {
                      deposits = deposits.concat(blockchainDeposits);
                    }
                    if (Array.isArray(exchangeDeposits)) {
                      deposits = deposits.concat(exchangeDeposits);
                    }
                    return deposits;
                  }
                input:
                  blockchainDeposits: ${{ result.check_blockchain_deposits }}
                  exchangeDeposits: ${{ result.check_exchange_deposits }}
                language: typescript
              retry_settings: null
              loop_settings: null
              skip_module_if: null
            - id: process_deposits
              value:
                type: forloopflow
                iterator: ${{ result.combine_deposits }}
                flow:
                  modules:
                    - id: update_vault_balance_api
                      value:
                        type: script
                        path: deposit_monitor.py
                        input:
                          farm_id: ${{ $parent.$index.farm_id }}
                          asset_symbol: ${{ $index.asset_symbol }}
                          amount: ${{ $index.amount }}
                          supabase_url: $resources.supabase_connection.project_url
                          supabase_key: $resources.supabase_connection.service_role_key
                        function: update_vault_balance_api
                      retry_settings:
                        max_attempts: 3
                        delay_between_attempts: 3
                        backoff: linear
                      loop_settings: null
                      skip_module_if: null
                    - id: get_vault_id
                      value:
                        type: rawscript
                        content: |-
                          function getVaultId(balanceResult) {
                            return balanceResult && balanceResult.vault_id ? balanceResult.vault_id : null;
                          }
                        input:
                          balanceResult: ${{ result.update_vault_balance_api }}
                        language: typescript
                      retry_settings: null
                      loop_settings: null
                      skip_module_if: null
                    - id: log_deposit_transaction_api
                      value:
                        type: script
                        path: deposit_monitor.py
                        input:
                          farm_id: ${{ $parent.$index.farm_id }}
                          vault_id: ${{ result.get_vault_id }}
                          linked_account_id: ${{ $parent.$index.id }}
                          deposit: ${{ $index }}
                          supabase_url: $resources.supabase_connection.project_url
                          supabase_key: $resources.supabase_connection.service_role_key
                        function: log_deposit_transaction_api
                      retry_settings:
                        max_attempts: 3
                        delay_between_attempts: 3
                        backoff: linear
                      loop_settings: null
                      skip_module_if: ${{ !result.get_vault_id }}
              retry_settings:
                max_attempts: 1
                delay_between_attempts: 5
                backoff: linear
              loop_settings: null
              skip_module_if: ${{ !result.combine_deposits || result.combine_deposits.length === 0 }}
            - id: update_last_monitored_at
              value:
                type: script
                path: deposit_monitor.py
                input:
                  account_id: ${{ $index.id }}
                  supabase_url: $resources.supabase_connection.project_url
                  supabase_key: $resources.supabase_connection.service_role_key
                function: update_last_monitored_at
              retry_settings:
                max_attempts: 2
                delay_between_attempts: 2
                backoff: linear
              loop_settings: null
              skip_module_if: null
      retry_settings:
        max_attempts: 1
        delay_between_attempts: 5
        backoff: linear
      loop_settings: null
      skip_module_if: ${{ !result.get_monitorable_accounts || result.get_monitorable_accounts.length === 0 }}
    - id: summarize_results
      value:
        type: rawscript
        content: |-
          function summarizeResults(processResults, checkAccountsResult) {
            // Default response if no accounts were processed
            if (!processResults || !Array.isArray(processResults) || processResults.length === 0) {
              return checkAccountsResult || {
                success: true,
                message: "No accounts were processed",
                accounts_checked: 0,
                deposits_found: 0
              };
            }
            
            // Count total deposits found and processed
            let totalDepositsFound = 0;
            let totalDepositsProcessed = 0;
            let successfulAccounts = 0;
            let failedAccounts = 0;
            
            processResults.forEach(accountResult => {
              const accountProcessing = accountResult.process_deposits; 
              const deposits = accountProcessing && accountProcessing.length ? accountProcessing.length : 0;
              totalDepositsFound += deposits;
              
              // Count successful deposit processing
              if (accountProcessing && Array.isArray(accountProcessing)) {
                accountProcessing.forEach(deposit => {
                  if (deposit && deposit.log_deposit_transaction_api && 
                      !deposit.log_deposit_transaction_api.error) {
                    totalDepositsProcessed++;
                  }
                });
              }
              
              if (deposits > 0) {
                successfulAccounts++;
              } else {
                failedAccounts++;
              }
            });
            
            return {
              success: true,
              accounts_checked: processResults.length,
              accounts_with_deposits: successfulAccounts,
              accounts_without_deposits: failedAccounts,
              total_deposits_found: totalDepositsFound,
              total_deposits_processed: totalDepositsProcessed,
            };
          }
        input:
          processResults: ${{ result.process_accounts }}
          checkAccountsResult: ${{ result.check_if_accounts_exist }}
        language: typescript
      retry_settings: null
      loop_settings: null
      skip_module_if: null
  triggers:
    - schedule:
        cron: "*/1 * * * *"
        timezone: UTC
  tag: deposit-monitoring
  lock_settings:
    wait_for_lock: true
  lang: typescript
  concurrency_settings:
    max_concurrency: 1
  retry_settings:
    max_attempts: 0
    delay_between_attempts: 0
    backoff: constant
  error_handler: null
  enabled: true 