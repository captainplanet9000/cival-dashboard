// Organic Flow Fields Generator
// Create this setup:
// 1. Grid SOP with high resolution (e.g., 200x200)
// 2. Point Wrangle (this code) for flow field generation
// 3. Add SOP for adding points along flow lines
// 4. Another Point Wrangle for particle movement
// 5. Convert Line SOP for creating trails

// Parameters to expose in UI
// float seed = ch("seed");               // Global seed
// float flow_scale = chf("flow_scale");  // Scale of the flow field
// float curl = chf("curl");              // Amount of curl noise
// float speed = chf("speed");            // Particle movement speed
// int steps = chi("steps");              // Number of integration steps
// vector flow_color1 = chv("flow_col1"); // Start color
// vector flow_color2 = chv("flow_col2"); // End color

// Initialize position and time
vector pos = @P;
float time = @Time;
float seed = ch("seed");

// Generate base flow field using curl noise
vector flow = curlnoise(pos * chf("flow_scale") + seed);

// Add complexity with multiple noise layers
vector flow2 = curlnoise(pos * chf("flow_scale") * 2.0 + seed + 1234.5);
vector flow3 = curlnoise(pos * chf("flow_scale") * 4.0 + seed + 5678.9);

// Combine flow fields with different weights
flow = normalize(flow + flow2 * 0.5 + flow3 * 0.25);

// Apply curl noise for additional organic movement
float curl_amount = ch("curl");
vector curl_offset = curlnoise(pos * 0.5 + time * 0.1);
flow += curl_offset * curl_amount;

// Store flow direction for particle system
v@flow_dir = normalize(flow);

// Calculate flow intensity for coloring
float flow_intensity = length(flow);
float normalized_intensity = fit(flow_intensity, 0, 2, 0, 1);

// Generate color gradient based on flow
vector color1 = chv("flow_col1");
vector color2 = chv("flow_col2");
@Cd = mix(color1, color2, normalized_intensity);

// Add variation based on position
float pos_variation = noise(pos * 0.1 + seed);
@Cd *= 1.0 + pos_variation * 0.2;

// Store additional attributes for particle system
f@flow_speed = ch("speed") * (1.0 + normalized_intensity);
f@life = 1.0;  // Initial life value for particles
i@steps = chi("steps");  // Number of integration steps

// Optional: Add turbulence
if(ch("enable_turbulence") > 0) {
    vector turb = turbulence(pos * chf("turb_scale"), 
                           chi("turb_octaves"),
                           chf("turb_rough"),
                           chf("turb_atten"));
    @Cd += turb * chf("turb_influence");
}

// Store original position for reference
v@orig_pos = @P;

// Optional: Displace points slightly based on flow
if(ch("displace_points") > 0) {
    @P += flow * ch("displacement_amount");
} 